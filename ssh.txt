----SSH Guide and Reference Manual----

Table of Contents

    Introduction to SSH
    Network Architecture
    SSH Key Management
    Basic Commands
    Configuration
    Security
    Advanced Features
    File Transfer
    Enterprise Integration
    Container and Cloud Security
    Agent Management
    Remote Access
    Tunneling and Forwarding
    Service Management
    Performance Optimization
    Troubleshooting
    Emerging Technologies
    Security Standards
    Complete Command Reference





1. Introduction to SSH

SSH (Secure Shell) is a critical protocol for secure remote access and file transfer, providing:

    Comprehensive network configuration management
    Secure replacement for insecure protocols like Telnet
    Strong encryption and authentication
    Multiple authentication methods
    Advanced scripting capabilities
    Granular network diagnostics


Core Protocol Features-

    Well-Known Port: 22 (Primary SSH communication)
    Strong encryption and security standards
    Multiple authentication methods support
    Secure file transfer capabilities
    Remote command execution
    Port forwarding and tunneling




Core Components-

    connection: Network connections
    device: Network interfaces
    general: System-wide management
    radio: Wireless controls




Network Architecture-
File Structure

    Configuration: /etc/ssh/sshd_config
    User keys: ~/.ssh/
    Host keys: /etc/ssh/
    Known hosts: ~/.ssh/known_hosts
    Authorized keys: ~/.ssh/authorized_keys
















---Basic SSH--
Make a connection
Command: ssh user@hostname
Description: Connects to a remote host using the specified username.

Connect with Specific Port
Command: ssh -p 2222 user@hostname
Description: Connects to a remote host on a specified port (default is 22).

Connect with Specific Identity File
Command: ssh -i /path/to/private_key user@hostname
Description: Connects using a specific private key file for authentication.

Copy Files from Local to Remote (SCP)
Command: scp /path/to/local_file user@hostname:/path/to/remote_directory
Description: Securely copies files from the local machine to the remote host.

Copy Files from Remote to Local (SCP)
Command: scp user@hostname:/path/to/remote_file /path/to/local_directory
Description: Securely copies files from the remote host to the local machine.

Execute Command on Remote Host
Command: ssh user@hostname 'command_to_execute'
Description: Executes a command on the remote host without opening an interactive shell.

Start Secure FTP Session (SFTP)
Command: sftp user@hostname
Description: Starts an SFTP session to transfer files securely.

Enable SSH Compression
Command: ssh -C user@hostname
Description: Enables compression for the SSH connection to reduce data size.

Local Port Forwarding (SSH Tunneling)
Command: ssh -L local_port:destination_host:remote_port user@hostname
Description: Forwards a local port to a port on the remote host.

Remote Port Forwarding (SSH Tunneling)
Command: ssh -R remote_port:local_host:local_port user@hostname
Description: Forwards a remote port to a port on the local machine.

Check SSH Version
Command: ssh -V
Description: Displays the version of the SSH client installed on your machine.

Enable Trusted X11 Forwarding
Command: ssh -Y username@remote_host
Description: Enables trusted X11 forwarding, allowing GUI applications from the remote host to be displayed locally.

Add Host to Known Hosts File
Command: ssh-keyscan -H hostname >> ~/.ssh/known_hosts
Description: Adds the public key of a host to the known hosts file for authentication verification.

Copy Entire Directory from Local to Remote (SCP)
Command: scp -r /path/to/local_directory user@hostname:/path/to/remote_directory
Description: Securely copies an entire directory from the local machine to the remote host.

Copy Entire Directory from Remote to Local (SCP)
Command: scp -r user@hostname:/path/to/remote_directory /path/to/local_directory
Description: Securely copies an entire directory from the remote host to the local machine.

Generate SSH Key Pair
Command: ssh-keygen -t rsa -b 4096
Description: Generates a strong RSA key pair for secure authentication.

Copy SSH Public Key to Remote Host
Command: ssh-copy-id user@hostname
Description: Copies the local machine's public key to the remote host for passwordless login.

Create SSH Config Alias
Command: ssh myserver
Description: Uses an alias defined in ~/.ssh/config to connect to a predefined host.














SSH Key Management-

Generating Keys:
RSA Keys (Recommended)
# Generate RSA key
ssh-keygen -t rsa -b 4096

    -t rsa: Specify RSA key type
    -b 4096: 4096-bit key strength (protection against brute-force)


ED25519 Keys (Modern):
# Generate ED25519 key
ssh-keygen -t ed25519
Benefits:
    Smaller key size
    Higher performance
    Modern cryptographic standard



-Key Management-

    Default Locations:
        Private key: ~/.ssh/id_rsa
        Public key: ~/.ssh/id_rsa.pub

Key Operations:
# List keys
ls ~/.ssh/
ls /etc/ssh/keys

# View public key
cat ~/.ssh/id_rsa.pub

# Check fingerprint
ssh-keygen -l -f /etc/ssh/ssh_host_rsa_key.pub



Key Deployment:

# Copy to server
ssh-copy-id username@remote_host

# Add to known hosts
ssh-keyscan -H hostname >> ~/.ssh/known_hosts

4. Basic Commands
Connection Commands
# Standard connection
ssh username@remote_host

# Specify port
ssh -p 2222 username@remote_host

# Use identity file
ssh -i ~/.ssh/custom_key username@remote_host

# Execute command
ssh user@hostname 'command_to_execute'

# View logged-in users
w -f

# Check version
ssh -V









-Common Operations-

# Enable compression
ssh -C user@hostname

# Custom config file
ssh -F /path/to/config user@hostname

# Add host to known hosts
ssh-keyscan -H hostname >> ~/.ssh/known_hosts






Configuration-
SSH Service Configuration

    Location: /etc/ssh/sshd_config

Security Settings
# Disable root login
PermitRootLogin no

# Limit users
AllowUsers username1 username2

# Disable password authentication
PasswordAuthentication no

# Rate limiting
MaxStartups 10:30:60
MaxAuthTries 3
LoginGraceTime 30

# Session control
ClientAliveInterval 300
ClientAliveCountMax 2
MaxSessions 2

# Encryption
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com
MACs hmac-sha2-512-etm@openssh.com
KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group16-sha512

# Logging
LogLevel DEBUG

Client Configuration

    Location: ~/.ssh/config

Global Settings:

Host *
    Compression yes
    CompressionLevel 6
    ControlMaster auto
    ControlPath ~/.ssh/controlmasters/%r@%h:%p
    ControlPersist 10m
    ServerAliveInterval 60
    ServerAliveCountMax 5
    TCPKeepAlive yes



Specific Host Configuration:

Host example
    HostName example.com
    User username
    Port 2222
    IdentityFile ~/.ssh/id_rsa



Jump Host Configuration:

Host jumphost
    HostName example.com
    User jumpadmin
    IdentityFile ~/.ssh/jumphost_key

Host target
    HostName internal.server
    ProxyJump jumphost
    User targetuser






6. Security
Firewall Configuration
UFW (Ubuntu/Debian)
sh

# Allow SSH
sudo ufw allow ssh

# Alternative
sudo ufw allow 22/tcp
Firewalld (CentOS/RHEL)

# Allow SSH service
sudo firewall-cmd --permanent --add-service=ssh

# Alternative
sudo firewall-cmd --permanent --add-port=22/tcp





Security Best Practices

    Use key-based authentication only
    Disable root login
    Implement strong passwords
    Regular key rotation
    Access control lists
    Rate limiting
    Proper logging
    Firewall rules
    Multi-factor authentication
    Session monitoring

Authentication Methods

    Key-based
    Password
    Multi-factor
    Certificate-based
    Biometric

Encryption Types

    Symmetric
    Asymmetric
    Forward secrecy
    Perfect forward secrecy






7. Advanced Features


Port Forwarding:

# Local port forwarding
ssh -L local_port:destination_host:remote_port username@ssh_server

# Remote port forwarding
ssh -R remote_port:local_host:local_port username@ssh_server

# Dynamic port forwarding (SOCKS Proxy)
ssh -D 8080 username@remote_host

# Restrict port binding
GatewayPorts clientspecified




X11 Forwarding:

# Standard X11
ssh -X username@remote_host

# Trusted X11
ssh -Y username@remote_host
ForwardX11Trusted yes




Multiplexing:

# Enable multiplexing
ssh -o ControlMaster=yes -o ControlPath=~/.ssh/master-%r@%h:%p user@hostname

# Terminate session
ssh -O exit user@hostname





8. File Transfer
SCP Commands

# Copy to remote
scp /path/to/local_file user@hostname:/path/to/remote_directory

# Copy from remote
scp user@hostname:/path/to/remote_file /path/to/local_directory

# Copy directory
scp -r /path/to/local_directory user@hostname:/path/to/remote_directory



SFTP Commands:

# Start SFTP session
sftp user@hostname

# File operations
# Upload file
put /path/to/local_file /path/to/remote_directory

# Download file
get /path/to/remote_file /path/to/local_directory

# Upload directory
put -r /path/to/local_directory /path/to/remote_directory

# Download directory
get -r /path/to/remote_directory /path/to/local_directory

# Directory operations
mkdir /path/to/remote_directory
rmdir /path/to/remote_directory
cd /path/to/remote_directory
lcd /path/to/local_directory

# File management
chmod 755 /path/to/remote_file
rm /path/to/remote_file
rename /path/to/remote_file /path/to/new_remote_file




9. Enterprise Integration
Ansible Integration
YAML

# Playbook example
name: Deploy SSH Keys
ansible.posix.authorized_key:
  user: "{{ item.user }}"
  key: "{{ item.key }}"




Automated Deployment Script:

for host in $(cat hosts.txt); do
  ssh-copy-id -i ~/.ssh/id_rsa.pub user@$host
done

CI/CD Integration (GitLab)
YAML

before_script:
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PRIVATE_KEY")

Enterprise Security Features

    LDAP/Active Directory integration
    Certificate-based authentication
    Automated key management
    Centralized access control
    Compliance monitoring
    Security policy enforcement



10. Container and Cloud Security
Container Security

    SSH jump hosts
    Agent forwarding security
    Key persistence
    Container access control

Docker Integration

    Secure container access
    Key management
    Network security
    Volume mounts

Cloud Provider Integration
AWS Systems Manager

    Enable SSM agent
    Configure session logging
    Set IAM permissions

Azure Bastion

    Configure bastion host
    Just-in-time access
    Diagnostic logging

Cloud Security

    Managed SSH services
    Instance connect features
    Cloud key rotation
    Security groups





11. Agent Management

SSH Agent Setup

# Start agent
eval $(ssh-agent -s)
ssh-add ~/.ssh/id_rsa

Environment Variables

    SSH_AUTH_SOCK: Agent connection socket
    SSH_AGENT_PID: Agent process ID

Agent Forwarding


ForwardAgent yes

Agent Timeout


ssh-add -t 3600 # 1-hour timeout

Kill Agent


ssh-agent -k

Agent Security

    Limit forwarding to trusted hosts
    Monitor forwarding chains
    Regular cleanup
    Access control




12. Remote Access
ProxyJump Setup
Command Line

ssh -J user@jumphost user@destination

Config File


Host destination
    ProxyJump jumphost

Secure Shell Options


# Keep alive
ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=5 user@hostname

# TCP keep alive
ssh -o TCPKeepAlive=yes user@hostname

# No host key check
ssh -o StrictHostKeyChecking=no user@hostname




13. Tunneling and Forwarding
Dynamic Port Forwarding
sh

# SOCKS proxy setup
ssh -D 8080 username@remote_host

# Browser configuration
# Configure SOCKS5 proxy: localhost:8080

Tunnel Security


# Restrict port binding
GatewayPorts clientspecified

# Monitor tunnels
netstat -tulpn | grep ssh





14. Service Management
System Control

# Restart service
systemctl restart sshd

# Check status
systemctl status sshd

# View logs
journalctl -u sshd

Log Management


# View auth logs
tail -f /var/log/auth.log

# View secure logs
tail -f /var/log/secure



15. Performance Optimization
Connection Speed

    Use compression
    Optimize buffer sizes
    Enable multiplexing
    Configure keepalive

Compression Settings


# Enable compression
Compression yes
CompressionLevel 6

Connection Persistence


# Keep alive settings
ServerAliveInterval 60
ServerAliveCountMax 5
TCPKeepAlive yes



16. Troubleshooting
Diagnostic Commands


# Debug connection
ssh -vvv username@host

# Check service
systemctl status sshd
journalctl -u sshd

# Monitor connections
netstat -tulpn | grep ssh

Common Issues Resolution

    Network connectivity
    Key permissions
    Configuration syntax
    Authentication methods
    Firewall rules
    DNS resolution
    Key format
    Protocol version mismatch





17. Emerging Technologies
Protocol Evolution

    QUIC protocol adoption
    TLS 1.3 implementation
    Zero-trust architectures
    Quantum-resistant algorithms

IoT and Edge Computing

    MQTT protocols
    6LoWPAN networks
    Zigbee and Z-Wave
    Edge security
    Low-power protocols

Future Developments

    Extended port ranges
    Software-defined networking
    Blockchain integration
    Zero-knowledge proofs
    Homomorphic encryption
    Quantum cryptography





18. Security Standards
Compliance Requirements

    NIST guidelines
    Industry standards
    Security protocols
    Audit requirements

Authentication Standards

    Key-based authentication
    Multi-factor authentication
    Certificate-based authentication
    Biometric authentication

Encryption Standards

    Symmetric encryption
    Asymmetric encryption
    Forward secrecy
    Perfect forward secrecy



19. Complete Command Reference
Basic Commands


# Connection
ssh user@hostname
ssh -p 2222 user@hostname
ssh -i /path/to/private_key user@hostname
ssh user@hostname 'command'

# Version and compression
ssh -V
ssh -C user@hostname

# Key management
ssh-keygen -t rsa -b 4096
ssh-keygen -t ed25519
ssh-add ~/.ssh/id_rsa
ssh-copy-id user@hostname

# File transfer
scp /path/to/local_file user@hostname:/path/to/remote_directory
scp -r /path/to/local_directory user@hostname:/path/to/remote_directory








-Advanced Commands-


# X11 forwarding
ssh -X user@hostname
ssh -Y user@hostname

# Agent forwarding
ssh -A user@hostname

# Jump host
ssh -J user@jumphost user@destination

# Multiplexing
ssh -o ControlMaster=yes -o ControlPath=~/.ssh/master-%r@%h:%p user@hostname
ssh -O exit user@hostname

# Keep alive
ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=5 user@hostname

