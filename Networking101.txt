---Networking 101---



Introduction to Networking-

Networking is the practice of connecting computers and other devices to share resources
and information. It involves various protocols and configurations to ensure proper
communication between devices.

We'll start with the fundamentals of IP addressing and network models, then dive into the
nitty-gritty of configuring network interfaces, setting up DHCP and DNS, and securing your
network with firewalls and best practices.

Along the way, you'll find:

Clear explanations of key networking concepts
Helpful ASCII diagrams and illustrations
Practical examples and use cases
Step-by-step tutorials for common tasks
Tips, tricks, and best practices from seasoned pros
A treasure trove of useful commands and configuration snippets
The IPv4 4-layer network model
Network interface names and configurations
Validating network setups
Common networking commands and tools
Advanced topics like IPv6, DHCP, DNS, and network security







_   _      _                      _    _                _____       _     _
| \ | |    | |                    | |  (_)              / ____|     (_)   | |
|  \| | ___| |___      _____  _ __| | _____ _ __   __ _| |  __ _   _ _  __| | ___
| . ` |/ _ \ __\ \ /\ / / _ \| '__| |/ / _ \ '_ \ / _` | | |_ | | | | |/ _` |/ _ \
| |\  |  __/ |_ \ V  V / (_) | |  |   <  __/ | | | (_| | |__| | |_| | | (_| |  __/
|_| \_|\___|\__| \_/\_/ \___/|_|  |_|\_\___|_| |_|\__, |\_____|\___|_|\__,_|\___|
                                                    __/ |
                                                   |___/






What is IP?

IP stands for Internet Protocol, and it's a set of rules that govern how data is sent and received over the internet. Think of it like the postal system for the internet, where data is sent in packets (like letters) from one computer to another.
IPv4

IPv4 (Internet Protocol version 4) is the fourth version of the Internet Protocol. It's the most widely used version and looks like this:
Code

192.168.1.1

Key Features of IPv4

    32-bit Address: IPv4 addresses are 32 bits long, which means there are about 4.3 billion unique addresses.
    Dot-Decimal Notation: IPv4 addresses are written in a format like 192.168.1.1.

Example

Here's a simple graphical representation of an IPv4 address:
Code

+---+---+---+---+
|192|168| 1 | 1 |
+---+---+---+---+

Each part separated by a dot is called an octet and can range from 0 to 255.
What is IPv6?

IPv6 (Internet Protocol version 6) is the newer version of the Internet Protocol designed to replace IPv4. It was developed because we are running out of IPv4 addresses.
Key Features of IPv6

    128-bit Address: IPv6 addresses are 128 bits long, which means there are a huge number of unique addresses (more than 340 undecillion!).
    Hexadecimal Notation: IPv6 addresses are written in a format like 2001:0db8:85a3:0000:0000:8a2e:0370:7334.

Example

Here's a simple graphical representation of an IPv6 address:
Code

+----+----+----+----+----+----+----+----+
|2001|0db8|85a3|0000|0000|8a2e|0370|7334|
+----+----+----+----+----+----+----+----+

Each part separated by a colon is called a hextet and is represented in hexadecimal (base 16).
Comparing IPv4 and IPv6
Address Length

    IPv4: 32 bits
    IPv6: 128 bits

Notation

    IPv4: Dot-decimal notation (e.g., 192.168.1.1)
    IPv6: Hexadecimal notation (e.g., 2001:0db8:85a3:0000:0000:8a2e:0370:7334)

Address Space

    IPv4: Approximately 4.3 billion addresses
    IPv6: An extremely large number of addresses (more than 340 undecillion)

Simplified IPv6 Addresses

IPv6 addresses can be simplified by removing leading zeros and using double colons (::) to represent consecutive groups of zeros:

    Full IPv6: 2001:0db8:0000:0000:0000:0000:0000:0001
    Simplified IPv6: 2001:db8::1

Visualizing the Transition

Think of IPv4 like a small neighborhood with a limited number of houses (addresses). As more people (devices) need houses, we run out of space. IPv6 is like moving to a huge new city with plenty of room for everyone.
IPv4 Neighborhood
Code

192.168.1.1
192.168.1.2
...
192.168.1.255

IPv6 City
Code

2001:0db8:85a3:0000:0000:8a2e:0370:7334
2001:0db8:85a3:0000:0000:8a2e:0370:7335
...
2001:0db8:85a3:ffff:ffff:ffff:ffff:ffff

Summary

    IP: Internet Protocol, the set of rules for sending data over the internet.
    IPv4: The older version with 32-bit addresses.
    IPv6: The newer version with 128-bit addresses, designed to provide a vast number of unique addresses.
    Notation: IPv4 uses dot-decimal notation, while IPv6 uses hexadecimal notation.
    Address Space: IPv6 offers a much larger address space than IPv4.


























-IPv4 4-Layer Network Model-

The IPv4 network model consists of four layers, each responsible for different aspects of network communication:

    Application Layer: This layer is responsible for application-specific client/server communication. It includes protocols like SSH, HTTPS, NFS, CIFS, and SMTP.
    Transport Layer: This layer handles data transfer between devices using TCP and UDP protocols. It uses ports to identify specific services, which are listed in the /etc/services file.
    Internet Layer: This layer manages the routing of packets across networks using the Internet Control Message Protocol (ICMP) for control messages.
    Link Layer: This layer handles media access and the connection to physical media, such as Ethernet or Wi-Fi.








-IPv6 4-Layer Network Model-

The IPv6 network model consists of four layers, each responsible for different aspects of network communication:

Application Layer:
        Responsible for application-specific client/server communication.
        Includes protocols like SSH, HTTPS, NFS, CIFS, and SMTP.
        Same as in IPv4.

Transport Layer:
        Handles data transfer between devices using TCP and UDP protocols.
        Uses ports to identify specific services, which are listed in the /etc/services file.
        Same as in IPv4.

Internet Layer:
        Manages the routing of packets across networks.
        Uses ICMPv6 for control messages, including error reporting and diagnostics.
        Key Differences:
            Addressing: IPv6 uses 128-bit addresses, significantly expanding the address space compared to the 32-bit addresses used in IPv4.
            Simplified Header: IPv6 has a simplified header format designed to improve processing efficiency.
            No NAT: IPv6 does not require Network Address Translation (NAT) due to its vast address space.
            Autoconfiguration: IPv6 supports stateless address autoconfiguration (SLAAC), allowing devices to configure themselves automatically when connected to a network.

Link Layer:
        Handles media access and connection to physical media.
        Includes technologies like Ethernet and Wi-Fi.
        Same as in IPv4.






















Networking Devices: Routers, Switches, and Hubs
Routers

Function:

    Routers are devices that forward packets of data between different networks. They are crucial for connecting multiple networks and directing traffic efficiently.

Key Features:

    Packet Forwarding: Routers analyze the destination address in the packet header and determine the best path for the packet to reach its destination. This process is known as routing.
    ICMP (Internet Control Message Protocol): Routers use ICMP to send control messages, such as error messages and operational information, to other devices. For example, if a router cannot deliver a packet, it might send an ICMP "Destination Unreachable" message back to the source.
    Connecting Networks: Routers connect different networks together, such as connecting a local area network (LAN) to the internet. They act as gateways, the points where one network meets another (e.g., a DSL or cable modem connecting to an ISP).
    NAT (Network Address Translation): Routers often perform NAT to allow multiple devices on a private network to share a single public IP address.

Switches

Function:

    Switches are devices that operate primarily at Layer 2 (Data Link Layer) and sometimes at Layer 3 (Network Layer) of the OSI model. They forward data frames between devices within the same network (LAN).

Key Features:

    MAC Address Table: Switches maintain a table of MAC (Media Access Control) addresses to keep track of which devices are connected to which ports. This allows them to forward data frames only to the specific port associated with the destination MAC address.
    Forwarding Frames: Switches forward data frames based on the destination MAC address. Unlike hubs, which broadcast frames to all ports, switches send frames only to the relevant port, reducing network congestion.
    Crossover Cables: When connecting two switches directly, a crossover cable is used to ensure that the transmit and receive pins are correctly aligned. Modern switches often have auto-sensing ports that can adjust for straight-through or crossover cables automatically.

Hubs

Function:

    Hubs are basic networking devices that operate at Layer 1 (Physical Layer) of the OSI model. They are used to connect multiple devices in a network, but they are less intelligent than switches or routers.

Key Features:

    Broadcasting Frames: Hubs broadcast incoming data frames to all ports, regardless of the destination. This means all connected devices receive the data, leading to potential network congestion and collisions.
    No MAC Address Table: Hubs do not maintain a MAC address table, which means they cannot intelligently forward data to specific devices.
    Legacy Devices: Hubs are considered outdated and are largely replaced by switches in modern networks due to their inefficiency and lack of security features.

How Routers Forward Packets of Data

    Receiving a Packet: When a router receives a data packet, it examines the packet's header to determine the destination IP address.
    Routing Table Lookup: The router consults its routing table to find the best path to the destination network. The routing table contains information about various network paths and their corresponding next-hop addresses.
    Forwarding the Packet: Based on the routing table, the router forwards the packet to the next hop along the path to its destination. This process continues until the packet reaches its final destination.
    ICMP Usage: If the router encounters an issue (e.g., the destination network is unreachable), it may send an ICMP message back to the source, informing it of the problem.

OSI Model Layers for Switches and Routers

    Switches: Primarily operate at Layer 2 (Data Link Layer) and sometimes at Layer 3 (Network Layer) for advanced switches.
        Layer 2: Handles MAC addresses and data frames.
        Layer 3: Handles IP addresses and routing (for Layer 3 switches).
    Routers: Operate at Layer 3 (Network Layer).
        Layer 3: Handles IP addresses, packet forwarding, and routing.

Summary

    Routers: Forward packets between different networks, use routing tables, and can send ICMP messages for network diagnostics.
    Switches: Forward data frames within the same network using MAC addresses, reduce network congestion by directing frames to specific ports, and may use crossover cables for direct connections.
    Hubs: Broadcast frames to all ports, operate at the Physical Layer, and are largely replaced by switches due to inefficiency.

Understanding these devices and their roles in a network helps in designing and managing efficient and reliable network infrastructures.











































Network Interface Names

Network interfaces are identified by specific naming conventions. Here are some common names and their meanings:

    Ethernet:
        eth0, eth1, eth2, etc.
        en0, etc.
    Wireless LAN: wl
    Wireless Wide Area Network: ww
    Onboard Adapter: o
    Hotplug Slot: s
    PCI: p
    MAC Address: x (Media Access Control address)
    Index ID or Port: n

PTY and TTY

    PTY (Pseudo Teletype Terminal): An emulated terminal on a graphical interface.
    TTY (TeleType): A physical or virtual terminal/console connection.





/etc/services

The /etc/services file lists all the network services and their corresponding port numbers. It is used to map service names to port numbers for various network protocols.
Validating Network Configuration


































To validate network configuration, you can use the ip command to display device and address information. The ip addr show command provides detailed information about network interfaces.
Example
bash

ip addr show eth0

Output:
Code

eth0<Broadcast, Multicast, Up, Lower, Up>
  1. mtu 1500
  2. link/ether brd mac
  3. inet ip brd ip
  4. 172.25.0.244
  5. inet6 mac/64 scope link

Explanation:

    Status: The interface is up and supports broadcast, multicast, and lower-level protocols.
    MTU: The Maximum Transmission Unit size is 1500 bytes.
    MAC Address: The hardware address of the Ethernet device.
    IPv4 Address: The assigned IP address and broadcast address.
    IPv6 Address: The assigned IPv6 address with its scope.



























































--Common commands--

Network Interface and Performance

    ip -s link show eth0
        Shows detailed statistics of network performance for the interface eth0, including packet statistics and errors.

    ifconfig
        Displays the configuration of network interfaces, including IP addresses, netmasks, and more.

    ip a
        Displays all IP addresses assigned to all network interfaces.

    ethtool eth0
        Displays or changes the settings of the Ethernet device eth0.

    mii-tool eth0
        Diagnoses and displays the link status of the Ethernet interface eth0.

Routing Information

    ip route
        Shows the routing table, which contains information on how packets should be routed through the network.

    route -n
        Displays the kernel's IP routing table in numeric format.

    ip r list table all
        Lists all routing tables available on the system.

Connectivity Testing

    ping
        Sends ICMP Echo Request packets to an IP address to test connectivity and measure round-trip time (RTT).

    tracepath
        Traces the path packets take to reach an IP address, showing each hop and its RTT.

    traceroute
        Similar to tracepath, but provides more detailed information about each hop.

Socket and Port Information

    ss
        Displays socket statistics, showing open network connections and listening ports.

    ss -ta
        Lists all TCP sockets, including established connections and listening sockets.

    ss -tuln
        Lists all listening TCP and UDP ports with numeric addresses.

    netstat -tuln
        Displays listening sockets (TCP and UDP) with numeric addresses.

    netstat -p
        Shows the process ID and program name associated with each socket.

Network Configuration and Management

    nmcli
        Command-line tool for managing NetworkManager, used to configure network connections.

    nmtui
        Text-based user interface for NetworkManager, providing an easier way to configure network settings.

    systemctl restart network
        Restarts the network service to apply new configurations.

    dhclient
        Requests an IP address from a DHCP server.

    hostname
        Displays or sets the system's hostname.

    resolvectl
        Manages DNS settings.

Network Security and Firewalls

    iptables -L
        Lists all current iptables rules.

    ufw status
        Displays the status of the Uncomplicated Firewall (UFW).

    firewalld-cmd --list-all
        Lists all current firewalld rules.

Network Monitoring and Troubleshooting

    tcpdump -i eth0
        Captures and displays packets on the network interface eth0.

    wireshark
        Graphical network protocol analyzer for capturing and analyzing network packets.

    iftop -i eth0
        Displays bandwidth usage on the network interface eth0.

    nmap
        Scans an IP address for open ports and running services.

    mtr
        Combines the functionality of ping and traceroute, providing continuous network path monitoring.

DNS and Name Resolution

    nslookup
        Queries DNS servers to find the IP address of a domain.

    dig
        Performs detailed DNS lookups.

    host
        Resolves a domain name to its IP address.

Network File Transfers

    scp file user@remote:/path
        Copies a file to a remote host using SSH.

    rsync -avz file user@remote:/path
        Efficiently synchronizes files between the local and remote host.

    ftp
        Connects to an FTP server to transfer files.

    sftp user@remote
        Securely transfers files using the SSH File Transfer Protocol.

Wireless Network Management

    iwconfig
        Configures wireless network interfaces.

    iwlist scan
        Lists available wireless networks.

    wpa_supplicant -i wlan0 -c /etc/wpa_supplicant.conf
        Connects to a wireless network using WPA/WPA2 encryption.

























---Host Name and Name Resolution--

Changing System Host Name

Changing the hostname of a system is an essential task for network management and administration. The hostname is the name given to a computer on a network. It is used to identify the device and facilitate communication between devices. Here are various methods to change the system hostname, along with detailed explanations.



Methods to Change the Hostname

1. Using the hostname Command

The hostname command is a simple utility to display or set the system's hostname.
Display the Current Hostname
bash

hostname

This command will display the current hostname of the system.
Set a New Hostname
bash

sudo hostname new-hostname

Replace new-hostname with the desired hostname. This change is temporary and will revert upon reboot.


2. Editing the /etc/hostname File

The /etc/hostname file contains the permanent hostname of the system, which is set during system initialization.
View the Current Hostname
bash

cat /etc/hostname

This command will display the current hostname stored in the /etc/hostname file.
Change the Hostname
bash

sudo nano /etc/hostname

Edit the file to include the new hostname. Save and exit the editor. For the change to take effect, you need to restart the system or use the hostnamectl command to apply the changes immediately.


3. Using the hostnamectl Command

The hostnamectl command is part of the systemd suite and provides a comprehensive way to manage the system hostname.
Set a Static Hostname
bash

sudo hostnamectl set-hostname new-hostname

This command sets the static hostname to new-hostname. This change is persistent across reboots.
View Hostname Status
bash

hostnamectl status

This command displays the current status of the hostname, including static, transient, and pretty hostnames.


4. Editing the /etc/hosts File

The /etc/hosts file maps hostnames to IP addresses. It is essential to update this file when changing the hostname to ensure proper name resolution within the system.
View the /etc/hosts File
bash

cat /etc/hosts

This command will display the contents of the /etc/hosts file.
Edit the /etc/hosts File
bash

sudo nano /etc/hosts

Update the line that starts with 127.0.1.1 to reflect the new hostname:
Code

127.0.1.1  new-hostname

Save and exit the editor.
Name Resolution

Name resolution is the process of mapping human-readable hostnames to IP addresses. It is a critical component of network communication. The system uses various methods for name resolution:


1. /etc/hosts File

The /etc/hosts file is a simple text file used to map hostnames to IP addresses. It is typically used for local name resolution.
Example Entry
Code

127.0.0.1   localhost
127.0.1.1   new-hostname
192.168.1.1 server.example.com server


2. Domain Name System (DNS)

DNS is a hierarchical and decentralized naming system used to resolve hostnames to IP addresses across the internet.
Querying DNS

You can use tools like nslookup, dig, and host to query DNS servers for name resolution.
Example Using nslookup
bash

nslookup example.com

Example Using dig
bash

dig example.com

Example Using host
bash

host example.com



3. Name Service Switch (NSS)

The Name Service Switch configuration file (/etc/nsswitch.conf) determines the order in which name resolution services are queried.
Example Entry
Code

hosts: files dns

This entry specifies that the system should first check the /etc/hosts file and then query DNS for name resolution.
4. Caching Name Servers

Caching name servers store DNS query results for a specified period. This reduces the load on DNS servers and speeds up subsequent queries for the same hostname.
Example Using systemd-resolved

Modern Linux distributions often use systemd-resolved as a caching name server.
Checking systemd-resolved Status
bash

systemctl status systemd-resolved



5. Configuring DNS Resolvers

The /etc/resolv.conf file specifies the DNS servers used by the system to resolve hostnames.
Example /etc/resolv.conf
Code

nameserver 8.8.8.8
nameserver 8.8.4.4

This configuration uses Google's public DNS servers.
Conclusion

Changing the system hostname and understanding name resolution are fundamental tasks for network management. Various methods, such as using the hostname command, editing configuration files, and utilizing hostnamectl, provide flexibility in managing the hostname. Proper name resolution ensures seamless communication across the network, leveraging local files, DNS, and caching mechanisms. By following these detailed steps, you can effectively manage and troubleshoot hostnames and name resolution on your system.





















NMTUI Guide
Introduction to NMTUI

nmtui (Network Manager Text User Interface) is a user-friendly, text-based interface for managing network connections on Linux systems. It is part of the NetworkManager suite and provides an easier way to configure network settings without needing to use complex command-line tools.
Why Use NMTUI?

    User-Friendly: Provides a simple, menu-driven interface.
    Versatile: Supports configuration of both wired and wireless connections.
    Convenient: Allows quick and easy network setup.

Installing NMTUI

nmtui is typically included with NetworkManager, but if it is not installed, you can install it using the package manager for your distribution.

On Ubuntu/Debian
sudo apt-get install network-manager

On CentOS/RHEL
sudo yum install NetworkManager-tui

On Fedora
sudo dnf install NetworkManager-tui

Launching NMTUI
To start nmtui, open a terminal and type:
sudo nmtui

You may need to use sudo to ensure you have the necessary permissions to make network changes.

Main Menu Options

Upon launching nmtui, you will see a menu with several options:

    Edit a connection: Create, modify, or delete network connections.
    Activate a connection: Enable or disable network connections.
    Set system hostname: Change the system's hostname.

1. Edit a Connection

This option allows you to add, modify, or delete network connections.
Adding a New Connection

    Select Edit a connection and press Enter.
    Use the arrow keys to navigate to and press Enter.
    Choose the type of connection (e.g., Ethernet, Wi-Fi) and press Enter.
    Fill in the required details such as SSID, security type, and password for Wi-Fi, or IP settings for Ethernet.
    Navigate to and press Enter to save the connection.

Modifying an Existing Connection

    Select Edit a connection and press Enter.
    Use the arrow keys to select the connection you want to modify and press Enter.
    Change the necessary settings such as IP configuration, DNS servers, or connection name.
    Navigate to and press Enter to save the changes.

Deleting a Connection

    Select Edit a connection and press Enter.
    Use the arrow keys to select the connection you want to delete.
    Navigate to and press Enter.
    Confirm the deletion when prompted.

2. Activate a Connection

This option allows you to enable or disable network connections.

    Select Activate a connection and press Enter.
    Use the arrow keys to navigate to the connection you want to activate or deactivate.
    Press Enter to toggle the connection state (active/inactive).

3. Set System Hostname

This option allows you to change the system's hostname.

    Select Set system hostname and press Enter.
    Enter the new hostname and navigate to .
    Press Enter to apply the new hostname.

Example Use Cases
Example 1: Connecting to a Wi-Fi Network

    Launch nmtui by typing sudo nmtui in the terminal.
    Select Edit a connection and press Enter.
    Navigate to and press Enter.
    Choose Wi-Fi and press Enter.
    Enter the SSID (network name), select the security type, and enter the Wi-Fi password.
    Navigate to and press Enter to save the connection.
    Select Activate a connection and press Enter.
    Choose the new Wi-Fi connection and press Enter to activate it.

Example 2: Setting a Static IP Address for Ethernet

    Launch nmtui by typing sudo nmtui in the terminal.
    Select Edit a connection and press Enter.
    Select the Ethernet connection you want to modify and press Enter.
    Navigate to the IPv4 CONFIGURATION section.
    Change the method to Manual and enter the static IP address, netmask, and gateway.
    Optionally, set DNS servers in the DNS SERVERS field.
    Navigate to and press Enter to save the changes.
    Select Activate a connection and press Enter.
    Choose the modified Ethernet connection and press Enter to reactivate it with the new settings.

Conclusion

nmtui is a powerful and user-friendly tool for managing network connections on Linux systems. It simplifies the process of configuring network settings and is especially useful for users who prefer a graphical interface over command-line tools. By following this guide, you can efficiently set up and manage your network connections using nmtui.






























Firewall-Config Guide
Introduction to Firewall-Config

firewall-config is a graphical user interface (GUI) tool that allows users to manage firewall settings on Linux systems. It is part of the firewalld suite, which provides a dynamic firewall management solution with support for network zones to define the trust level of network connections or interfaces.
Why Use Firewall-Config?

    User-Friendly: Provides an intuitive graphical interface for managing firewall rules.
    Versatile: Supports configuration of various network zones, services, and ports.
    Dynamic: Allows real-time changes without restarting the firewall.

Installing Firewall-Config

firewall-config is typically included with firewalld, but if it is not installed, you can install it using the package manager for your distribution.
On Ubuntu/Debian
bash

sudo apt-get install firewalld firewall-config

On CentOS/RHEL
bash

sudo yum install firewalld firewall-config

On Fedora
bash

sudo dnf install firewalld firewall-config

Starting Firewall-Config

To start firewall-config, you can either search for it in your system's application menu or run it from the terminal with:
bash

sudo firewall-config

You may need to use sudo to ensure you have the necessary permissions to make firewall changes.
Main Interface Overview

Upon launching firewall-config, you will see the main interface divided into several sections:

    Zones: Defines different trust levels for network connections.
    Services: Predefined rules for common services.
    Ports: Custom rules for specific ports.
    ICMP Filter: Controls handling of ICMP messages.
    Rich Rules: Advanced rules for complex configurations.

Common Tasks with Firewall-Config
1. Managing Zones

Zones are used to define the trust level of network connections. Each zone has a specific set of rules and is associated with one or more network interfaces.
Viewing and Changing Zones

    In the Zones tab, you can see the available zones.
    Select a zone to view its details and active rules.
    To change the default zone, select the desired zone and click Set as Default.

Assigning an Interface to a Zone

    Go to the Zones tab.
    Select the desired zone.
    Click Interfaces and then Add.
    Select the network interface you want to assign to the zone and click OK.

2. Managing Services

Services are predefined sets of rules for common applications and protocols (e.g., HTTP, SSH).
Adding a Service to a Zone

    In the Zones tab, select the desired zone.
    Click Services and then Add.
    Select the service you want to allow in the zone and click OK.

Removing a Service from a Zone

    In the Zones tab, select the desired zone.
    Click Services.
    Select the service you want to remove and click Remove.

3. Managing Ports

You can configure custom rules for specific ports that are not covered by predefined services.
Adding a Port to a Zone

    In the Zones tab, select the desired zone.
    Click Ports and then Add.
    Enter the port number and select the protocol (TCP/UDP).
    Click OK to add the port rule.

Removing a Port from a Zone

    In the Zones tab, select the desired zone.
    Click Ports.
    Select the port rule you want to remove and click Remove.

4. ICMP Filter

ICMP (Internet Control Message Protocol) messages are used for diagnostic and error reporting.
Allowing or Blocking ICMP Types

    In the Zones tab, select the desired zone.
    Click ICMP Filter.
    Check or uncheck the ICMP types you want to allow or block.
    Click Apply to save the changes.

5. Rich Rules

Rich Rules provide advanced control over the firewall rules, allowing complex configurations.
Adding a Rich Rule

    In the Zones tab, select the desired zone.
    Click Rich Rules and then Add.
    Enter the rule in the rich language syntax.
    Click OK to add the rule.

Example of a Rich Rule

To allow HTTP traffic only from a specific IP address:
plaintext

rule family="ipv4" source address="192.168.1.100" service name="http" accept

Example Use Cases
Example 1: Allowing SSH Access Only from a Specific IP Address

    Launch firewall-config by typing sudo firewall-config in the terminal.
    Select the zone where the SSH service is allowed (e.g., public).
    Click Rich Rules and then Add.
    Enter the following rule to allow SSH access only from 192.168.1.100:
    plaintext

    rule family="ipv4" source address="192.168.1.100" service name="ssh" accept

    Click OK to add the rule.

Example 2: Blocking All Incoming Traffic Except HTTP and HTTPS

    Launch firewall-config by typing sudo firewall-config in the terminal.
    Select the zone you want to configure (e.g., public).
    Remove all services except HTTP and HTTPS.
        Click Services.
        Remove all services except http and https.
    Add a rich rule to block all other incoming traffic:
    plaintext

    rule family="ipv4" source NOT address="0.0.0.0/0" drop

    Click OK to add the rule.

Conclusion

firewall-config is a powerful and user-friendly tool for managing firewall settings on Linux systems. It simplifies the process of configuring firewall rules and is especially useful for users who prefer a graphical interface. By following this guide, you can efficiently set up and manage your firewall settings using firewall-config.





















































----Advanced----









IPv6 4-Layer Network Model

The IPv6 network model, like its IPv4 counterpart, consists of four layers, each responsible for different aspects of network communication. Here are the details for each layer in the context of IPv6:
1. Application Layer

This layer is responsible for application-specific client/server communication. It includes protocols that facilitate communication between applications over the network. Some common protocols in this layer include:

    SSH (Secure Shell): Provides secure remote login and command execution.
    HTTPS (Hypertext Transfer Protocol Secure): Ensures secure communication over the web.
    NFS (Network File System): Allows file sharing over the network.
    CIFS (Common Internet File System): Used for file sharing in Windows networks.
    SMTP (Simple Mail Transfer Protocol): Used for sending emails.

2. Transport Layer

This layer handles data transfer between devices using TCP and UDP protocols. It ensures reliable or best-effort delivery of data, respectively, and uses ports to identify specific services. The ports are listed in the /etc/services file.

    TCP (Transmission Control Protocol): Provides reliable, ordered, and error-checked delivery of data.
    UDP (User Datagram Protocol): Provides a connectionless datagram service that emphasizes reduced latency over reliability.

3. Internet Layer

This layer manages the routing of packets across networks. In IPv6, it uses ICMPv6 for control messages, which include error reporting and diagnostic functions.

    ICMPv6 (Internet Control Message Protocol for IPv6): Handles diagnostic and error reporting functions in the IPv6 network. It includes messages such as Neighbor Discovery (ND) used for address resolution and router discovery.

4. Link Layer

This layer handles media access and the connection to physical media, such as Ethernet or Wi-Fi. It is responsible for delivering packets to the physical network interface.

    Ethernet: A common wired networking technology used in local area networks (LANs).
    Wi-Fi: A wireless networking technology that allows devices to communicate over a wireless signal.

Key Differences Between IPv4 and IPv6

While the structure of the network model remains similar, there are key differences between IPv4 and IPv6 primarily in the Internet Layer:

    Addressing: IPv6 uses 128-bit addresses, significantly expanding the address space compared to the 32-bit addresses used in IPv4.
    Simplified Header: IPv6 has a simplified header format designed to improve processing efficiency.
    Autoconfiguration: IPv6 supports stateless address autoconfiguration (SLAAC), allowing devices to configure themselves automatically when connected to a network.
    No Broadcast: IPv6 eliminates the need for broadcast addresses, using multicast addresses instead.
    Enhanced Security: IPv6 was designed with security in mind, incorporating IPsec (Internet Protocol Security) as a fundamental component.















    ---ifconfig network interface parameters---


Here is a comprehensive guide to ifconfig and its flags, along with examples for common use cases on Ubuntu:

Basic Usage

Display All Interfaces
ifconfig

This command displays the status of all active network interfaces.

Display a Specific Interface
ifconfig eth0

This command shows the details of the specified interface (eth0).

Flags and Options

Assigning an IP Address
sudo ifconfig eth0 192.168.1.100

Assigns the IP address 192.168.1.100 to the interface eth0.

Setting a Netmask
sudo ifconfig eth0 netmask 255.255.255.0

Sets the subnet mask to 255.255.255.0 for the interface eth0.

Setting a Broadcast Address
sudo ifconfig eth0 broadcast 192.168.1.255

Sets the broadcast address to 192.168.1.255 for the interface eth0.

Enabling an Interface
sudo ifconfig eth0 up

Brings the network interface eth0 up (activates it).

Disabling an Interface
sudo ifconfig eth0 down

Brings the network interface eth0 down (deactivates it).

Changing the MAC Address
sudo ifconfig eth0 hw ether 00:1A:2B:3C:4D:5E

Changes the MAC address of eth0 to 00:1A:2B:3C:4D:5E.

Setting the MTU
sudo ifconfig eth0 mtu 1400

Sets the Maximum Transmission Unit (MTU) to 1400 bytes for eth0.


Advanced Usage

Adding an Alias to an Interface
sudo ifconfig eth0:1 192.168.1.101

Adds an alias eth0:1 with the IP address 192.168.1.101 to the interface eth0.

Removing an Alias
sudo ifconfig eth0:1 down

Removes the alias eth0:1.

Displaying Interface Statistics
ifconfig eth0

Displays detailed statistics including packet counts, errors, dropped packets, and more for the interface eth0.

Using Promiscuous Mode
sudo ifconfig eth0 promisc

Sets the interface eth0 to promiscuous mode, which allows it to capture all packets on the network segment.

Removing Promiscuous Mode
sudo ifconfig eth0 -promisc

Removes promiscuous mode from the interface eth0.


Example Use Cases

Example 1: Configuring a Static IP Address
sudo ifconfig eth0 192.168.1.100 netmask 255.255.255.0 up

This command sets a static IP address 192.168.1.100 with a netmask 255.255.255.0 and brings the interface eth0 up.

Example 2: Temporarily Disabling a Network Interface
sudo ifconfig eth0 down

This command disables the network interface eth0.

Example 3: Enabling a Network Interface
sudo ifconfig eth0 up

This command enables the network interface eth0.

Example 4: Changing the MAC Address for Security Testing
sudo ifconfig eth0 hw ether 00:1A:2B:3C:4D:5E

This command changes the MAC address of eth0 to 00:1A:2B:3C:4D:5E.

Example 5: Viewing Detailed Interface Information
ifconfig eth0

This command provides detailed information about the eth0 interface, including its IP address, netmask, broadcast address, and more.


Conclusion

The ifconfig command is a powerful tool for network interface configuration and management on Unix-like operating systems. Although it has been deprecated in favor of the ip command on some systems, it remains a useful utility for various network-related tasks.


For further reading, you can refer to the ifconfig man page by running:
man ifconfig







ifconfig Flags and Options

Interface Flags
- UP: Interface is up and running.
- BROADCAST: Supports broadcast.
- LOOPBACK: Interface is a loopback interface.
- POINTTOPOINT: Interface is a point-to-point link.
- MULTICAST: Supports multicast.
- PROMISC: Interface is in promiscuous mode.
- ALLMULTI: Receive all multicast packets.
- DYNAMIC: Interface address is dynamically assigned.
- MASTER: Master flag for a bonding device.
- SLAVE: Slave flag for a bonding device.
- RUNNING: Interface is running.
- NOARP: No ARP protocol.
- DEBUG: Debugging flag.
- LOWER_UP: Interface is physically up.
- CARRIER: Interface is carrier detected.

Interface Types
- eth0, eth1, ...: Ethernet interfaces.
- wlan0, wlan1, ...: Wireless LAN interfaces.
- lo: Loopback interface.
- virbr0: Virtual bridge interface.
- ppp0: Point-to-Point Protocol interface.

Common Commands
- ifconfig: Display all active interfaces.
- ifconfig [interface]: Display information for a specific interface.

Options
- address: Set the IP address of the interface.
  - Example: sudo ifconfig eth0 192.168.1.100
- netmask: Set the network mask for the interface.
  - Example: sudo ifconfig eth0 netmask 255.255.255.0
- broadcast: Set the broadcast address for the interface.
  - Example: sudo ifconfig eth0 broadcast 192.168.1.255
- up: Enable the interface.
  - Example: sudo ifconfig eth0 up
- down: Disable the interface.
  - Example: sudo ifconfig eth0 down
- hw ether [MAC]: Set the MAC address of the interface.
  - Example: sudo ifconfig eth0 hw ether 00:1A:2B:3C:4D:5E
- mtu [SIZE]: Set the Maximum Transmission Unit (MTU) size.
  - Example: sudo ifconfig eth0 mtu 1400
- promisc: Enable promiscuous mode.
  - Example: sudo ifconfig eth0 promisc
- -promisc: Disable promiscuous mode.
  - Example: sudo ifconfig eth0 -promisc
- pointopoint [ADDRESS]: Set the point-to-point address.
  - Example: sudo ifconfig ppp0 pointopoint 192.168.2.1
- arp: Enable the Address Resolution Protocol (ARP).
  - Example: sudo ifconfig eth0 arp
- -arp: Disable the Address Resolution Protocol (ARP).
  - Example: sudo ifconfig eth0 -arp
- multicast: Enable multicast.
  - Example: sudo ifconfig eth0 multicast
- -multicast: Disable multicast.
  - Example: sudo ifconfig eth0 -multicast
- txqueuelen [LEN]: Set the transmit queue length.
  - Example: sudo ifconfig eth0 txqueuelen 1000
- metric [N]: Set the interface metric.
  - Example: sudo ifconfig eth0 metric 1

Example Usage
Configuring a Static IP Address
sudo ifconfig eth0 192.168.1.100 netmask 255.255.255.0 up

Viewing Detailed Interface Information
ifconfig eth0

Setting the MTU Size
sudo ifconfig eth0 mtu 1400

Changing the MAC Address
sudo ifconfig eth0 hw ether 00:1A:2B:3C:4D:5E

Enabling Promiscuous Mode
sudo ifconfig eth0 promisc

Disabling Promiscuous Mode
sudo ifconfig eth0 -promisc

Setting the Point-to-Point Address
sudo ifconfig ppp0 pointopoint 192.168.2.1

Enabling ARP
sudo ifconfig eth0 arp

Disabling ARP
sudo ifconfig eth0 -arp

Setting the Transmit Queue Length
sudo ifconfig eth0 txqueuelen 1000

Setting the Interface Metric
sudo ifconfig eth0 metric 1

For further reading, refer to the ifconfig man page:
man ifconfig



























What is DHCP?

DHCP (Dynamic Host Configuration Protocol) is a network management protocol used to dynamically assign IP addresses and other network configuration parameters to devices on a network. This allows devices to communicate with each other and access network resources without requiring manual configuration of IP addresses.
How DHCP Works

    Discovery: When a device (client) connects to a network, it sends a DHCPDISCOVER message to find a DHCP server.
    Offer: The DHCP server responds with a DHCPOFFER message, offering an IP address and other network settings to the client.
    Request: The client sends a DHCPREQUEST message to the server, requesting the offered IP address.
    Acknowledgment: The DHCP server sends a DHCPACK message to the client, confirming the IP address assignment and providing other configuration details.

Configuring DHCP on Ubuntu Linux

Installing DHCP Server

To set up a DHCP server on Ubuntu, you need to install the isc-dhcp-server package.
sudo apt-get update
sudo apt-get install isc-dhcp-server



Configuring DHCP Server

The main configuration file for the DHCP server is located at /etc/dhcp/dhcpd.conf. You will need to edit this file to define the network settings and IP address range.
sudo nano /etc/dhcp/dhcpd.conf


Here is a basic example configuration:
# Define the default lease time and maximum lease time
default-lease-time 600;
max-lease-time 7200;

# Specify the subnet and IP address range
subnet 192.168.1.0 netmask 255.255.255.0 {
    range 192.168.1.100 192.168.1.200;
    option routers 192.168.1.1;
    option subnet-mask 255.255.255.0;
    option domain-name-servers 8.8.8.8, 8.8.4.4;
    option domain-name "example.com";
}



Starting and Enabling DHCP Server

After configuring the DHCP server, you need to start the service and enable it to start on boot.
sudo systemctl start isc-dhcp-server
sudo systemctl enable isc-dhcp-server




Verifying DHCP Server Status

You can check the status of the DHCP server to ensure it is running correctly.
sudo systemctl status isc-dhcp-server


Configuring DHCP Client

Most devices are configured to use DHCP by default. However, if you need to configure a DHCP client manually on Ubuntu, you can do so by editing the network configuration file.

For systems using netplan (common in modern Ubuntu versions), edit the relevant configuration file in /etc/netplan/. Here is an example configuration:
YAML

network:
    version: 2
    ethernets:
        eth0:
            dhcp4: yes

Apply the configuration with:
sudo netplan apply



Conclusion

DHCP simplifies network configuration by automatically assigning IP addresses and other network settings to devices on a network. Setting up a DHCP server on Ubuntu involves installing the isc-dhcp-server package, configuring the DHCP settings, and starting the service. Configuring a DHCP client typically involves ensuring the network interface is set to use DHCP. This guide provides a basic overview to get you started with DHCP on Ubuntu Linux.


















What is DNS?

DNS (Domain Name System) is a hierarchical and decentralized naming system used to translate human-readable domain names (like www.example.com) into IP addresses (like 192.168.1.1) that computers use to identify each other on the network. This process is known as "name resolution."
How DNS Works

    Query: When you enter a domain name in your browser, a DNS query is sent to a DNS resolver.
    Resolver: The resolver checks its cache. If the information is not cached, it queries other DNS servers starting with the root DNS servers.
    Root Servers: The root servers direct the resolver to the appropriate Top-Level Domain (TLD) servers (e.g., .com, .org).
    TLD Servers: The TLD servers direct the resolver to the authoritative DNS servers for the specific domain.
    Authoritative Servers: The authoritative DNS servers provide the IP address for the requested domain.
    Response: The resolver returns the IP address to your browser, which then connects to the web server.

Configuring DNS on Ubuntu Linux

Viewing Current DNS Settings

You can view your current DNS settings using the resolvectl command or by checking the /etc/resolv.conf file.
resolvectl status

or

cat /etc/resolv.conf


Configuring DNS Servers

To configure DNS servers on Ubuntu, you can use the netplan utility (common in modern Ubuntu versions).

    Edit the Netplan configuration file located in /etc/netplan/.

sudo nano /etc/netplan/01-netcfg.yaml

    Add or modify the nameservers section under the appropriate network interface. Here is an example configuration:

YAML

network:
    version: 2
    ethernets:
        eth0:
            dhcp4: yes
            nameservers:
                addresses:
                  - 8.8.8.8
                  - 8.8.4.4

    8.8.8.8 and 8.8.4.4 are Google's public DNS servers.

    Apply the configuration:
sudo netplan apply

Using DNS Tools
nslookup

nslookup is a command-line tool used to query DNS servers and obtain domain name or IP address mapping.
nslookup example.com

dig

dig (Domain Information Groper) is a flexible tool for interrogating DNS name servers.
dig example.com

host

host is a simple utility for performing DNS lookups.
host example.com

Setting Up a Local DNS Cache

You can set up a local DNS cache to speed up DNS queries by caching the results. One common tool for this is dnsmasq.

    Install dnsmasq:

sudo apt-get install dnsmasq

    Configure dnsmasq by editing /etc/dnsmasq.conf. Add or modify the following lines:

conf

listen-address=127.0.0.1
bind-interfaces

    Restart dnsmasq:

sudo systemctl restart dnsmasq

    Update the DNS settings to use the local cache. Edit the Netplan configuration file:

YAML

network:
    version: 2
    ethernets:
        eth0:
            dhcp4: yes
            nameservers:
                addresses:
                  - 127.0.0.1
                  - 8.8.8.8

    Apply the configuration:


sudo netplan apply

Conclusion

DNS is an essential service that translates domain names into IP addresses, making it easier for users to access resources on the internet. Configuring DNS on Ubuntu involves setting DNS servers using Netplan, using DNS tools like nslookup, dig, and host, and optionally setting up a local DNS cache with dnsmasq. By following this guide, you can efficiently manage your DNS settings on Ubuntu Linux.




















----Comprehensive Networking Security and Configuration Guide----

MAC Address Filtering

MAC Address Filtering allows you to specify which devices can access your network based on their MAC addresses. This adds an extra layer of security by allowing only known devices to connect.

    Enable MAC Filtering: Access your router settings, navigate to the security section, and enable MAC filtering.

    Add MAC Addresses: Enter the MAC addresses of allowed devices. For example, if you want to allow a device with MAC address 00:1A:2B:3C:4D:5E, you would add this address to the allowed list.



WPA2 AES Encryption (No WEP)

WPA2 (Wi-Fi Protected Access 2) with AES (Advanced Encryption Standard) is the most secure encryption method for wireless networks. Avoid using WEP as it is outdated and insecure.

    Enable WPA2 AES: In your router’s wireless settings, select WPA2 with AES encryption. Ensure no legacy WPA or WEP options are enabled.




NAT and PAT (Port Forwarding and Port Triggering)

NAT (Network Address Translation) allows multiple devices on a private network to share a single public IP address. PAT (Port Address Translation), a type of NAT, maps multiple private IP addresses to a single public IP address by using different ports.
Port Forwarding

Port forwarding allows external devices to access services on your local network by forwarding specific ports to a device.

    Single Port to Single Device: Specify the port number and the IP address of the device you want to forward the port to. For example, to forward port 80 (HTTP) to a local web server at 192.168.1.100:
    bash

    Port Number: 80
    IP Address: 192.168.1.100




Port Triggering

Port triggering dynamically opens ports when specific outbound traffic is detected.

    Configure Trigger Ports: Define the triggering port and the target port range. For example, to trigger port 8080 when outbound traffic on port 80 is detected:
    bash

    Trigger Port: 80
    Target Port Range: 8080-8080




SSID (Service Set Identifier)

SSID is the name of your wireless network.

    Configure SSID: Change the default SSID to a unique name to avoid conflicts with other networks.

    Disable SSID Broadcast: Optionally, hide your SSID to make it less visible to unauthorized users.




WPS (Wi-Fi Protected Setup)

WPS allows easy connection of devices to your Wi-Fi network using a PIN or push-button. However, it can be a security risk.

    Disable WPS: Turn off WPS in your router settings to prevent unauthorized access.

Power Level Controls

Power Level Controls allow you to adjust the transmission power of your router to limit the wireless signal range.

    Adjust Power Levels: Set the appropriate transmission power to cover your desired area while minimizing signal leakage.




Inbound Traffic

Inbound traffic refers to data coming into your network from the internet. Properly managing inbound traffic is crucial for network security.

    Firewall Rules: Configure your firewall to allow only necessary inbound traffic and block unwanted connections. For example, allow inbound traffic on port 443 (HTTPS) and block all others:
    bash

    Allow: Port 443 (HTTPS)
    Deny: All other ports



Outbound Traffic

Outbound traffic is data leaving your network and going to the internet. Controlling outbound traffic helps prevent data leaks and restricts access to certain services.

    Firewall Rules: Set rules to control which outbound traffic is allowed. For example, allow outbound traffic on port 80 (HTTP) and block all others:
    bash

    Allow: Port 80 (HTTP)
    Deny: All other ports



Blacklist and Whitelist

Blacklist: A list of entities denied access to your network or services.
Whitelist: A list of entities granted access to your network or services.

    Configure Lists: Use your router's firewall settings to add IP addresses or domains to the blacklist or whitelist. For example:
    bash

    Blacklist: 192.168.1.101
    Whitelist: 192.168.1.102




Disable Unused Ports

Disabling unused ports reduces the attack surface of your network.

    Close Unused Ports: Use your router's interface to disable any ports that are not in use.



Content Filtering

Content Filtering restricts access to certain types of web content.

    Set Rules: Use your router’s content filtering options to block specific websites or categories of content. For example, block access to social media sites:
    bash

    Block: facebook.com, twitter.com



Principle of Least Privilege

The Principle of Least Privilege dictates that users should have the minimum level of access necessary to perform their tasks.

    Limit Access Rights: Assign the least amount of privilege necessary for users and devices.



Access Control Lists (ACLs)

ACLs are used to define rules that control the traffic in and out of your network.

    Create ACLs: Define rules based on IP addresses, protocols, or ports to control access. For example:
    bash

    Allow: 192.168.1.0/24 for HTTP
    Deny: All others



TCP and UDP

TCP (Transmission Control Protocol) and UDP (User Datagram Protocol) are core protocols of the internet protocol suite.

    Track Applications: Use firewall settings to monitor and control applications using TCP/UDP protocols.



Network and Host-Based Firewalls
Network-Based Firewall

A network-based firewall protects the entire network by filtering traffic between the internet and the internal network.

    Configure Network Firewall: Set rules to allow or deny traffic based on IP addresses, ports, and protocols.



Host-Based Firewall

A host-based firewall is installed on individual devices to protect them from unauthorized access and threats.

    Configure Host Firewall: Set rules on each device to control incoming and outgoing traffic.




Conclusion

This guide provides a comprehensive overview of essential networking security and configuration topics. By implementing these practices, you can significantly enhance the security and performance of your network. For detailed steps and additional information, refer to your specific router or firewall documentation.



















--ARP (Address Resolution Protocol) Guide--
Introduction to ARP

ARP (Address Resolution Protocol) is a protocol used to map IP addresses to MAC (Media Access Control) addresses. It operates at the Link Layer (Layer 2) of the OSI model and is essential for the delivery of data packets within a local network.
How ARP Works

    ARP Request: When a device wants to communicate with another device on the same local network, it sends an ARP request. This request is a broadcast message (MAC address FF:FF:FF:FF:FF:FF) that asks, "Who has this IP address? Please send me your MAC address."

    ARP Reply: The device with the requested IP address responds with an ARP reply, which includes its MAC address.

    Caching: The requesting device caches the MAC address in its ARP table for future use. This reduces the need for repeated ARP requests.

ARP Table

The ARP table is a cache that stores mappings of IP addresses to MAC addresses. It is maintained by the operating system and is used to quickly resolve IP addresses to MAC addresses.
Viewing the ARP Table

On Linux systems, you can view the ARP table using the following command:
arp -n

Managing the ARP Table

You can add, delete, or modify entries in the ARP table using the arp command.

    Add an entry:

sudo arp -s <IP_ADDRESS> <MAC_ADDRESS>

Example:
sudo arp -s 192.168.1.10 00:1A:2B:3C:4D:5E

Delete an entry:
sudo arp -d <IP_ADDRESS>

Example:
    sudo arp -d 192.168.1.10



ARP Files and Services

ARP Cache File

The ARP cache is stored in memory and does not have a dedicated file location. However, you can view and manipulate the ARP cache using the arp command as mentioned above.
ARP Daemon

On some systems, the ARP daemon (arpd) is used to manage the ARP cache. This daemon listens for ARP requests and updates the ARP table accordingly. arpd is typically not required on modern Linux systems as the kernel handles ARP requests.


To check if arpd is running:
bash

ps aux | grep arpd


ARP in IPv6

In IPv6, ARP is replaced by the Neighbor Discovery Protocol (NDP). NDP performs functions similar to ARP, such as determining the link-layer address of a neighbor on the same network.
How NDP Works

    Neighbor Solicitation: Similar to ARP requests, an IPv6 device sends a Neighbor Solicitation message to find the MAC address of another device.
    Neighbor Advertisement: The target device responds with a Neighbor Advertisement message, providing its MAC address.


Viewing NDP Table

On Linux systems, you can view the NDP table using the ip command:
bash

ip -6 neighbor


Managing NDP Entries

You can add, delete, or modify NDP entries using the ip command.

    Add an entry:
    bash

sudo ip -6 neighbor add <IPV6_ADDRESS> lladdr <MAC_ADDRESS> dev <INTERFACE>

Example:
sudo ip -6 neighbor add fe80::1a2b:3c4d:5e6f lladdr 00:1A:2B:3C:4D:5E dev eth0

Delete an entry:
sudo ip -6 neighbor del <IPV6_ADDRESS> dev <INTERFACE>

Example:
    sudo ip -6 neighbor del fe80::1a2b:3c4d:5e6f dev eth0





Conclusion

ARP is a crucial protocol for resolving IP addresses to MAC addresses within a local network. It operates at the Link Layer and uses broadcast messages to discover the MAC address of a device associated with a given IP address. In IPv6, ARP is replaced by the Neighbor Discovery Protocol (NDP), which performs similar functions.

By understanding and managing ARP and NDP, network administrators can ensure efficient communication within their networks. For more detailed information, refer to the man pages for arp and ip:
bash

man arp
man ip





























IPv4 Address Structure:
+---+---+---+---+
|192|168|  1|  1|
+---+---+---+---+
8   8   8   8  = 32 bits total
IPv6 Address Structure:
+----+----+----+----+----+----+----+----+
|2001|0db8|85a3|0000|0000|8a2e|0370|7334|
+----+----+----+----+----+----+----+----+
16   16   16   16   16   16   16   16  = 128 bits total
Basic Network Topology:
Internet
|
+----+----+
|  Router |
+----+----+
|
+-----+-----+
|   Switch  |
+-----+-----+
|     |
+--+--+ +--+--+
| PC1 | | PC2 |
+-----+ +-----+
OSI Model Layers:
+-----------------------+
|   Application Layer   |
+-----------------------+
|    Transport Layer    |
+-----------------------+
|     Network Layer     |
+-----------------------+
|   Data Link Layer     |
+-----------------------+
|    Physical Layer     |
+-----------------------+




DHCP Process:
+--------+                  +------------+
| Client |                  |    DHCP    |
|        |  Discover        |   Server   |
+--------+ --------------->  +------------+
<---------------
Offer
--------------->
Request
<---------------
Acknowledge
DNS Resolution:
+----------+    +---------------+    +--------------+
|  Client  |    |  DNS Resolver |    | DNS Server   |
+----------+    +---------------+    +--------------+
|                  |                   |
| Query            | Recursive Query   |
|----------------->|------------------>|
|                  |                   |
|                  |     Response      |
|                  |<------------------|
| Response         |                   |
|<-----------------|                   |
Port Numbers and Services:
+------+--------------------+
| Port |     Service       |
+------+--------------------+
|   20 | FTP (data)        |
|   21 | FTP (control)     |
|   22 | SSH               |
|   23 | Telnet            |
|   25 | SMTP              |
|   53 | DNS               |
|   80 | HTTP              |
|  443 | HTTPS             |
+------+--------------------+
Firewall Diagram:
Internet
|
+-------------+
|  Firewall   |
+-------------+
|    |    |
DMZ  LAN  WAN


















