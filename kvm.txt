-KVM, Kernel based Virtual Manager-


-Install dependencies-
sudo apt install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager

qemu-kvm: The core virtualization backend
libvirt-daemon-system: System service for managing virtualization
libvirt-clients: Command-line tools
bridge-utils: Network bridging support
virt-manager: Graphical VM management tool



-Start, enable, verify libvirt service-
sudo systemctl start libvirtd
start, enable, status, restart (Start then Enable Required!)



-Create VM storage directory-
sudo mkdir -p /var/lib/libvirt/images/
sudo chown -R libvirt-qemu:libvirt /var/lib/libvirt/images/
sudo chmod 775 /var/lib/libvirt/images/

-Create storage pool-
sudo virsh pool-create-as --name rocky-pool --type dir --target /var/lib/libvirt/images/

-Move ISO image file-
sudo mv ~/Downloads/Rocky-9-Cinnamon-x86_64-latest.iso /var/lib/libvirt/images/

-Create Image directory-
sudo mkdir -p /var/lib/libvirt/images/rocky-linux
sudo chown -R libvirt-qemu:libvirt /var/lib/libvirt/images/rocky-linux
sudo chmod 775 /var/lib/libvirt/images/rocky-linux

-Create virtual disk-
sudo qemu-img create -f qcow2 /var/lib/libvirt/images/rocky-linux/rocky-vm.qcow2 18G

-Install-

sudo virt-install \
  --name rocky-vm \
  --memory 4096 \
  --vcpus 2 \
  --disk /var/lib/libvirt/images/rocky-linux/rocky-vm.qcow2,format=qcow2 \
  --cdrom /var/lib/libvirt/images/Rocky-9-Cinnamon-x86_64-latest.iso \
  --network network=default \
  --graphics spice \
  --os-variant=rocky9 \
  --console pty,target_type=serial

(Other RAM options include 1024,2048,4096,1GB,2GB,4GB)

-Run-
virsh start rocky-vm
virsh console rocky-vm
virsh list --all
virt-manager (graphical vm editor)
virt-viewer rocky-vm
remote-viewer spice://localhost:5900
virsh domdisplay rocky-vm
virsh shutdown rocky-vm
virsh destroy rocky-vm  (force shut down)
virsh console rocky-vm  (console access)
virsh edit [VM-NAME] (edit vm XML config file)




-Add your user to libvirt group to manage VMs without sudo-
sudo usermod -aG libvirt $USER
After installation, log out and log back in, or use
    "newgrp libvirt" to apply group changes.

-Verify virtualization support-
egrep -c '(vmx|svm)' /proc/cpuinfo
virt-host-validate

-Check KVM installation-
sudo kvm-ok  (If kvm-ok fails, check BIOS/UEFI settings)
journalctl -u libvirtd
journalctl -xe  (verbose)



-After installation you can-
Use virt-manager for graphical VM management
Use virsh commands for CLI VM control





-virsh Commands-
virsh list  (Shows running machines)
virsh list --all    (Shows all machines even if stopped)
virsh net-list --all (list available virtual networks)
virsh pool-list     (Storage pool)
virsh dominfo [VM-NAME]     (detailed VM information)
virsh edit [VM-NAME]    (Edit VM configuration)
virsh dumpxml [VM-NAME]

virsh start name
start, shutdown, destroy, suspend, resume, undefine


Storage Pools:
virsh pool-create-as --name [pool-name] --type dir --target /path/to/storage
virsh vol-list [pool-name]
virsh vol-create-as [pool-name] [volume-name] [size]

New virtual network:
virsh net-define [network-xml-file]
virsh net-start [network-name]
virsh net-autostart [network-name]
virsh net-dumpxml [network-name]

sudo nmcli connection add type bridge con-name br0 ifname br0
(Create a bridge network)

virsh net-update [network-name] add ip-dhcp-host \
  "<host mac='XX:XX:XX:XX:XX:XX' name='vm-name' ip='192.168.x.x'/>"
(Configure static IP for a VM)



Snapshots:
virsh snapshot-create-as [VM-NAME] [snapshot-name]
virsh snapshot-list [VM-NAME]
virsh snapshot-revert [VM-NAME] [snapshot-name]
virsh snapshot-delete [VM-NAME] [snapshot-name]



Resource management:
sudo apt install virt-top  (installs virtual TOP)
virsh domstats [VM-NAME]  (detail resource information)
sudo apt install htop
sudo apt install glances

Performance monitoring tools:
sudo apt install sysstat
Shows detailed system performance metrics:
sar -u
sar -r



Migration:
virsh capabilities (Check migration support)
virsh migrate [VM-NAME] qemu+ssh://destination-host/system
(Migrate a VM to another host)













-XML, Extended Markup Language-

Key XML Configuration Sections:

<name>: VM name
<memory>: RAM allocation
<vcpu>: CPU configuration
<disk>: Storage devices
<interface>: Network interfaces












----Advanced----


-Check SELinux or AppArmor configurations-
sestatus   for SELinux
aa-status  for AppArmor


-Troubleshooting commands-
Check system virtualization support:
dmidecode -t processor | grep -i virtualization

Verify KVM modules are loaded:
lsmod | grep kvm


-Formatting images-
Convert disk images:
qemu-img convert -f raw -O qcow2 input.img output.qcow2

Resize disk images:
qemu-img resize [VM-disk-path] +10G

Inspect disk image details:
qemu-img info [disk-image-path]


-Backup/Cloning-
Clone an existing VM:
virt-clone --original [SOURCE-VM-NAME] --name [NEW-VM-NAME] --file [NEW-DISK-PATH]

Basic backup using dd:
virsh shutdown [VM-NAME]
dd if=[/path/to/disk/image] of=[/backup/location/backup.img]



-Network advanced-
Create a macvtap network
virsh net-define macvtap-network.xml
# Example XML content:
<network>
  <name>macvtap</name>
  <forward mode="bridge">
    <interface dev="eth0"/>
  </forward>
</network>

List available network interfaces:
ip link show



-Security-
Restrict VM access:
chmod 600 /etc/libvirt/qemu/[VM-NAME].xml

Check for potential security issues:
virt-host-validate

Check libvirt socket permissions:
ls -l /var/run/libvirt/libvirt-sock

Verify network connectivity for VMs:
ping -c 4 [VM-IP-ADDRESS]

Check kernel log for virtualization errors:
dmesg | grep -i virtual





-Troubleshooting-
Check libvirt group membership:
groups

Add your user to libvirt group if needed:
sudo usermod -aG libvirt $USER

cd /var/lib/libvirt/images/rocky-linux
sudo chown libvirt-qemu:libvirt rocky-vm.qcow2
sudo chmod 660 rocky-vm.qcow2
qemu-img check rocky-vm.qcow2




Verify libvirtd service:
sudo systemctl status libvirtd
sudo systemctl start libvirtd
sudo systemctl enable libvirtd




-OS naming issues-
First, install the osinfo package:

sudo apt install -y libosinfo-bin
osinfo-query os | grep -i rocky

sudo virt-install \
  --name rocky-vm \
  --memory 4096 \
  --vcpus 2 \
  --disk /var/lib/libvirt/images/rocky-linux/rocky-vm.qcow2,format=qcow2 \
  --cdrom /var/lib/libvirt/images/Rocky-9-Cinnamon-x86_64-latest.iso \
  --network network=default \
  --graphics spice \
  --os-variant rocky9 \
  --console pty,target_type=serial



-Changing RAM-
Edit VM configuration:
virsh edit rocky-vm

# Look for the <memory> and <currentMemory> tags
# Modify these values to reduce RAM

Alternatively, use this command
virsh setmem rocky-vm 1024000  # Sets to 1024 MB

XML FILE:
<!-- 1 GB (1024 MB) -->
<memory unit='KiB'>1048576</memory>
<currentMemory unit='KiB'>1048576</currentMemory>

<!-- 2 GB (2048 MB) -->
<memory unit='KiB'>2097152</memory>
<currentMemory unit='KiB'>2097152</currentMemory>

<!-- 4 GB (4096 MB) -->
<memory unit='KiB'>4194304</memory>
<currentMemory unit='KiB'>4194304</currentMemory>

<!-- 6 GB (6144 MB) -->
<memory unit='KiB'>6291456</memory>
<currentMemory unit='KiB'>6291456</currentMemory>

<!-- 8 GB (8192 MB) -->
<memory unit='KiB'>8388608</memory>
<currentMemory unit='KiB'>8388608</currentMemory>

<!-- 16 GB (16384 MB) -->
<memory unit='KiB'>16777216</memory>
<currentMemory unit='KiB'>16777216</currentMemory>


















-Best Practices-
Regularly update KVM and libvirt packages
Use secure networks for VM communications
Implement backup strategies
Monitor system resources
Use minimal ISO images for installations





--Extra--
# CPU Pinning Example
virsh edit [VM-NAME]
# Add under <cpu> section
<cputune>
  <vcpupin vcpu='0' cpuset='0'/>
  <vcpupin vcpu='1' cpuset='1'/>
</cputune>

# Hugepages for performance
sudo sysctl -w vm.nr_hugepages=512

# Advanced Network Bonding
virsh net-define bond-network.xml
# Example XML for bonded network
<network>
  <name>bond0</name>
  <forward mode='bridge'/>
  <bridge name='bond0'/>
</network>







Libvirt Service Management (Add after existing commands):
# Automatic Startup Configuration
sudo systemctl enable libvirtd --now

# Log Rotation Configuration
# Add to /etc/logrotate.d/libvirtd
/var/log/libvirt/*.log {
    rotate 7
    daily
    compress
    missingok
    notifempty
}



# Command Chaining Example
virsh list --all | awk '/running/ {print $2}' | xargs -I {} virsh shutdown {}

# Resource Monitoring Script
#!/bin/bash
for VM in $(virsh list --name); do
    echo "VM: $VM"
    virsh dominfo $VM | grep "CPU(s)"
    virsh dominfo $VM | grep "Used memory"
done


snapshot automation-
#!/bin/bash
VM_NAME="rocky-vm"
SNAPSHOT_NAME="backup-$(date +%Y%m%d-%H%M%S)"

# Create automatic snapshot
virsh snapshot-create-as $VM_NAME $SNAPSHOT_NAME



Hot-plugging Devices:

Add or remove devices like network interfaces, disks, and USB devices while the VM is running
Use virsh attach-device and virsh detach-device commands with appropriate XML files


resources:
Use virsh domstats and virsh dommemstat for detailed VM resource usage statistics





To use virt-filesystems for checking the disk image contents, you need to provide the -a option followed by the path to the disk image file.
Here's the corrected command:
sudo virt-filesystems --long -h --all -a rocky-vm.qcow2

-a rocky-vm.qcow2: Specifies the path to the disk image file.
--long: Displays additional information about each filesystem.
-h or --human-readable: Prints sizes in human-readable format.
--all: Attempts to inspect all filesystems, including unknown ones.



-Deleting VM-
virsh shutdown rocky-vm
virsh undefine rocky-vm
rm /var/lib/libvirt/images/rocky-linux/rocky-vm.qcow2

-Create new-
qemu-img create -f qcow2 /var/lib/libvirt/images/rocky-linux/rocky-vm.qcow2 20G


sudo virt-install \
  --name rocky-vm \
  --memory 2048 \
  --vcpus 2 \
  --disk path=/var/lib/libvirt/images/rocky-linux/rocky-vm.qcow2,bus=virtio \
  --cdrom /var/lib/libvirt/images/Rocky-9-Cinnamon-x86_64-latest.iso \
  --network network=default \
  --graphics spice \
  --os-variant rocky9
