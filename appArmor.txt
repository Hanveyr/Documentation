----AppArmor Comprehensive Guide---


Introduction to AppArmor

AppArmor (Application Armor) is a Linux security module that provides mandatory access control (MAC) for programs. It allows the system administrator to restrict the capabilities of processes by enforcing security policies based on program behavior. AppArmor works by associating a security profile with each program, which defines the program's allowed actions and resources.
Basic Concepts and Terminology

    Profiles: Security policies that define the allowed actions and resources for a program.
    Enforce Mode: AppArmor enforces the security policies defined in the profiles and logs any violations.
    Complain Mode: AppArmor does not enforce the security policies but logs any violations. It is useful for testing and debugging profiles.
    aa-logprof: A tool that helps to create and update profiles based on logged events.





---AppArmor Commands---


AppArmor Status
sudo apparmor_status

Load Profile
sudo apparmor_parser -r /etc/apparmor.d/profile.name

Reload All Profiles
sudo systemctl reload apparmor.service

Disable a Profile
sudo ln -s /etc/apparmor.d/profile.name /etc/apparmor.d/disable/
sudo apparmor_parser -R /etc/apparmor.d/profile.name

Re-enable a Disabled Profile
sudo rm /etc/apparmor.d/disable/profile.name
sudo apparmor_parser -a /etc/apparmor.d/profile.name

Stop AppArmor
sudo systemctl stop apparmor.service
sudo systemctl disable apparmor.service

View AppArmor Profiles
ls /etc/apparmor.d/*

Create a New Profile
sudo apparmor_parser -a /etc/apparmor.d/profile.new

Generate a New Profile
sudo aa-genprof /path/to/bin

Update a Profile
sudo apparmor_parser -r /etc/apparmor.d/profile.name

Merge Profiles
sudo apparmor-merge /path/to/profile1 /path/to/profile2

List Active Profiles
sudo apparmor_status

Check Profile Status
sudo apparmor_parser -p

Human-readable Report
sudo apparmor-utils -report

Check AppArmor Logs
sudo tail -f /var/log/syslog | grep apparmor





Detailed Examples and Explanations

Check AppArmor Status
sudo apparmor_status

Example output:
Code

apparmor module is loaded.
22 profiles are loaded.
22 profiles are in enforce mode.
0 profiles are in complain mode.
0 processes have profiles defined.

Load a Profile
sudo apparmor_parser -r /etc/apparmor.d/profile.name

Example:
sudo apparmor_parser -r /etc/apparmor.d/usr.sbin.mysqld

Reload All Profiles
sudo systemctl reload apparmor.service

Example:
sudo systemctl reload apparmor.service

Disable a Profile
sudo ln -s /etc/apparmor.d/profile.name /etc/apparmor.d/disable/
sudo apparmor_parser -R /etc/apparmor.d/profile.name

Example:
sudo ln -s /etc/apparmor.d/usr.sbin.mysqld /etc/apparmor.d/disable/
sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.mysqld

Re-enable a Disabled Profile
sudo rm /etc/apparmor.d/disable/profile.name
sudo apparmor_parser -a /etc/apparmor.d/profile.name

Example:
sudo rm /etc/apparmor.d/disable/usr.sbin.mysqld
sudo apparmor_parser -a /etc/apparmor.d/usr.sbin.mysqld

Stop AppArmor
sudo systemctl stop apparmor.service
sudo systemctl disable apparmor.service







View AppArmor Profiles
ls /etc/apparmor.d/*

Example output:
Code

/etc/apparmor.d/usr.bin.evince
/etc/apparmor.d/usr.sbin.mysqld
/etc/apparmor.d/usr.sbin.ntpd

Create a New Profile
sudo apparmor_parser -a /etc/apparmor.d/profile.new

Example:
sudo apparmor_parser -a /etc/apparmor.d/usr.sbin.mynewprofile



Public code references from 1 repository

Generate a New Profile
sudo aa-genprof /path/to/bin

Example:
sudo aa-genprof /usr/sbin/mysqld

Update a Profile
sudo apparmor_parser -r /etc/apparmor.d/profile.name

Example:
sudo apparmor_parser -r /etc/apparmor.d/usr.sbin.mysqld

Merge Profiles
sudo apparmor-merge /path/to/profile1 /path/to/profile2

Example:
sudo apparmor-merge /etc/apparmor.d/usr.sbin.profile1 /etc/apparmor.d/usr.sbin.profile2




List Active Profiles

sudo apparmor_status

Example output:
Code

22 profiles are loaded.
22 profiles are in enforce mode.


Check Profile Status
sudo apparmor_parser -p

Example:
sudo apparmor_parser -p /etc/apparmor.d/usr.sbin.mysqld


Human-readable Report

sudo apparmor-utils -report

Example:

sudo apparmor-utils -report


Check AppArmor Logs

sudo tail -f /var/log/syslog | grep apparmor

Example:
sudo tail -f /var/log/syslog | grep apparmor




-Troubleshooting and Common Issues-

Swap Error

If AppArmor fails to start due to swap being enabled, use the following commands to disable swap:
sh

sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab

Container Runtime Error


If there is a container runtime error, use the following commands to resolve it:
sh

sudo rm /etc/containerd/config.toml
sudo systemctl restart containerd



Config Permission Issue

If there is a config permission issue, use the following commands to fix it:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


Profile Violations

To check and resolve profile violations, use the following command:
sudo aa-logprof

Review the logged violations and update the profile accordingly to grant the necessary permissions.
Profile Not Loaded



If a profile is not loaded, ensure the profile file is correctly located in /etc/apparmor.d/ and then load it using:
sudo apparmor_parser -a /etc/apparmor.d/profile.name


Profile Syntax Errors

If there are syntax errors in the profile, use the following command to check for errors:
sudo apparmor_parser -Q /etc/apparmor.d/profile.name


This command will provide detailed error messages to help you correct the syntax issues.






Advanced Features and Best Practices



Best Practices for Writing Profiles

    Start with Complain Mode: Always start by placing the profile in complain mode to identify necessary permissions.
    Use aa-logprof: Utilize aa-logprof to simplify the creation and updating of profiles based on logged events.
    Minimize Permissions: Grant the minimum required permissions to reduce the attack surface.
    Regular Audits: Regularly review and update profiles to ensure they remain effective.

Operator Pattern

Extend Kubernetes functionalities by creating custom controllers.
Writing and Using Kubernetes Operators

Example of a CustomResourceDefinition (CRD) for an Operator:
YAML

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: myresources.mydomain.com
spec:
  group: mydomain.com
  names:
    kind: MyResource
    plural: myresources
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true




Additional Commands and Examples

Profile template generation
aa-autodep /usr/sbin/application
aa-cleanprof /etc/apparmor.d/template

K8s AppArmor annotation
YAML

metadata:
  annotations:
    container.apparmor.security.beta.kubernetes.io/nginx: localhost/custom-nginx



Extended logging
auditctl -w /etc/apparmor/ -p wa
ausearch -ts today -k apparmor


Git integration
git add /etc/apparmor.d/
pre-commit hook for syntax validation




Basic profile structure
/path/to/binary {
  #include <abstractions/base>
  capability net_admin,
  /path/to/files/** rw,
}

Memory limits
set_rlimit memory=2G


Process limits
set_rlimit nproc=1024

Network namespace configuration
network {
  AF_INET tcp,udp,
  deny network raw,
  deny network packet,
}

Parent profile
/usr/sbin/parent {
  #include <abstractions/base>
  child_profile -> /usr/sbin/child
}


Auto-profile based on system calls
aa-autodep --scan-system
aa-logprof --scan-system-log


Profile versioning
git rev-parse HEAD > /etc/apparmor.d/version
git log -p /etc/apparmor.d/ > /var/log/apparmor/changes.log


Performance metrics
perf record -e 'apparmor:*' -a sleep 60
perf report --stdio


Profile optimization
aa-notify -s 1 -v
aa-exec -p /path/to/profile -- strace ./binary








Advanced AppArmor Profile Templates

Basic profile structure

/path/to/binary {
  #include <abstractions/base>
  capability net_admin,
  /path/to/files/** rw,
}


Memory and Process limits
set_rlimit memory=2G
set_rlimit nproc=1024


Network Configuration
network {
  AF_INET tcp,udp,
  deny network raw,
  deny network packet,
}


Performance Monitoring
perf record -e 'apparmor:*' -a sleep 60
perf report --stdio


Version Control Integration
git rev-parse HEAD > /etc/apparmor.d/version
git log -p /etc/apparmor.d/ > /var/log/apparmor/changes.log



Security constraints
set_child_profile child_profile
set_hat hat_name
change_profile -> profile_name
deny /** rwx # deny all by default




Docker profile example
profile docker-default flags=(attach_disconnected, mediate_deleted) {
  #include <abstractions/base>
  network,
  capability,
  file,
  umount,
  deny @{PROC}/{*,**^[0-9*],sys/kernel/shm*} wkx,
  deny @{PROC}/sysrq-trigger rwklx,
  deny @{PROC}/mem rwklx,
  deny @{PROC}/kmem rwklx,
}



Profile Testing Tools
aa-exec -p profile_name -- command # Run command with specific profile
aa-decode # Decode hex-encoded AppArmor failures
aa-disable # Disable specific profiles (alternative method)
aa-easyprof # Create basic AppArmor profiles
aa-status # Display human-readable status info


Policy Development
aa-remove-unknown # Clean stale profile entries
aa-audit # Set profile to audit mode
aa-unconfined # List processes not confined


Profile Generation Tools
aa-mergeprof # Alternative profile merger
genprof --help # View additional profile generation options
aa-cleanprof --help # View profile cleaning options






Example Outputs
Check AppArmor Status

Command:
sudo apparmor_status

Example Output:
Code

apparmor module is loaded.
22 profiles are loaded.
22 profiles are in enforce mode.
0 profiles are in complain mode.
0 processes have profiles defined.

View AppArmor Profiles

Command:
ls /etc/apparmor.d/*

Example Output:
Code

/etc/apparmor.d/usr.bin.evince
/etc/apparmor.d/usr.sbin.mysqld
/etc/apparmor.d/usr.sbin.ntpd

List Active Profiles
Command:
sudo apparmor_status

Example Output:
Code

22 profiles are loaded.
22 profiles are in enforce mode.

Troubleshooting and Common Issues
Swap Error

Issue:
If AppArmor fails to start due to swap being enabled, use the following commands to disable swap:
sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab

Container Runtime Error

Issue:
If there is a container runtime error, use the following commands to resolve it:
sudo rm /etc/containerd/config.toml
sudo systemctl restart containerd

Config Permission Issue

Issue:
If there is a config permission issue, use the following commands to fix it:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Profile Violations

Issue:
To check and resolve profile violations, use the following command:
sudo aa-logprof

Explanation:
Review the logged violations and update the profile accordingly to grant the necessary permissions.
Profile Not Loaded

Issue:
If a profile is not loaded, ensure the profile file is correctly located in /etc/apparmor.d/ and then load it using:
sudo apparmor_parser -a /etc/apparmor.d/profile.name

Profile Syntax Errors

Issue:
If there are syntax errors in the profile, use the following command to check for errors:
sudo apparmor_parser -Q /etc/apparmor.d/profile.name

Explanation:
This command will provide detailed error messages to help you correct the syntax issues.




