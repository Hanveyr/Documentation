-QEMU Introduction-

QEMU (Quick EMUlator) is an advanced open-source machine emulator and virtualization platform that provides comprehensive virtualization capabilities. As a sophisticated tool, QEMU enables system administrators, developers, and researchers to create, manage, and interact with virtual machines across diverse hardware architectures, supporting complex virtualization scenarios and cross-platform development strategies.


-Basic Concepts and Terminology-

Emulation: Precise reproduction of hardware and software characteristics of one computer system within another, enabling cross-architectural software execution.
Virtualization: Advanced technique of creating abstracted computing environments that simulate complete hardware platforms.
Guest: The virtualized operating system or application running within the emulated environment.
Host: The physical machine providing computational resources and managing virtualized environments.
Hypervisor (Type 2): Software layer running on a conventional operating system, facilitating virtual machine creation and management.
KVM (Kernel-based Virtual Machine): Linux kernel module enabling hardware-accelerated virtualization with near-native performance.


-Virtualization Modes-

QEMU supports multiple sophisticated virtualization approaches:

Full System Emulation: Complete system simulation including CPU and peripherals (most comprehensive but slower)
User-Mode Emulation: Running individual binary executables across different architectures
Paravirtualization: Uses modified guest kernels for improved performance
Hardware-Assisted Virtualization: Leverages CPU virtualization extensions for near-native performance







-Installation and Prerequisites-

Comprehensive Virtualization Platform Deployment

System Preparation:
sudo apt update
sudo apt full-upgrade -y

Advanced Virtualization Package Installation:
sudo apt install -y
qemu-system-x86
qemu-utils
qemu-kvm
libvirt-daemon-system
libvirt-clients
virt-manager
bridge-utils
cpu-checker
selinux-utils
apparmor

Hardware Virtualization Validation:
sudo kvm-ok
sudo virt-host-validate
sudo systemctl enable --now libvirtd

User Permission Configuration:
sudo usermod -aG kvm,libvirt $USER
newgrp libvirt







-Detailed Installation Explanation-
The virtualization installation process involves multiple critical components-

QEMU Core: Provides fundamental emulation and virtualization capabilities
Kernel-based Virtual Machine (KVM): Enables hardware-accelerated virtualization
Libvirt: Offers management tools and APIs for virtualization platforms
Virt-manager: Provides graphical interface for virtual machine management

Post-installation validation through 'kvm-ok' confirms hardware virtualization support.



-Virtualization Architecture Explanation-
QEMU's architectural design-

Emulation Core: Provides low-level, precise hardware simulation
KVM Integration Layer: Enables hardware-assisted virtualization
User-space Management System: Allows comprehensive configuration and control
Device Modeling Framework: Simulates diverse hardware devices and interfaces










---First Project---

Verify KVM support is enabled:
sudo kvm-ok


Create a QCOW2 disk image:
qemu-img create -f qcow2 rocky.qcow2 20G

Create image in your home directory (not root):
cd ~
qemu-img create -f qcow2 rocky.qcow2 20G


Keep iso's in a single location for easy of access/space:

/var/lib/libvirt/images/Rocky-9.5-x86_64-minimal.iso



Launch QEMU with Rocky ISO:
qemu-system-x86_64 \
-enable-kvm \
-cpu host \
-m 2048 \
-smp 2 \
-boot d \
-cdrom /home/roots/Downloads/Rocky-9.5-x86_64-minimal.iso \
-hda ~/rocky.qcow2 \
-device virtio-net-pci,netdev=net0 \
-netdev user,id=net0 \
-vga virtio


Key parameters:

-m 2048: 2GB RAM, Can also be written as 16G, for gigabyte
-smp 2: 2 CPU cores
-boot d: Boot from CD-ROM
-cdrom: Path to your Rocky ISO
-hda: Path to the disk image

















-Disk Image Management-

Advanced Disk Image Manipulation Techniques-

High-Performance Image Creation:
qemu-img create -f qcow2
-o preallocation=metadata,cluster_size=64k
-o lazy_refcounts=on
mydisk.qcow2 100G

Comprehensive Image Conversion:
qemu-img convert
-f qcow2
-O vmdk
-c
source.qcow2 destination.vmdk

Dynamic Disk Resizing:
qemu-img resize
-f qcow2
--shrink
mydisk.qcow2 +50G

Detailed Image Inspection:
qemu-img info --format-specific mydisk.qcow2















-Common QEMU-Related Errors and Solutions-

# KVM Acceleration Issues
If KVM acceleration is not working, check the following:
- Ensure that hardware virtualization is enabled in the BIOS/UEFI settings.
- Verify that the CPU supports virtualization (look for vmx or svm flags in /proc/cpuinfo).
- Check if the KVM kernel modules are loaded: lsmod | grep -E 'kvm|virtio'.
- Validate the host for virtualization: sudo virt-host-validate.

# Network Configuration Problems
If there are network issues with QEMU, consider the following steps:
- Validate the bridge configuration and ensure the bridge interface is up: brctl show.
- Check the status of network interfaces: ip link show.
- Verify the libvirt network settings: virsh net-list --all.
- Examine firewall rules that may be blocking network traffic: sudo iptables -L.


# Disk Image Issues
If there are problems with disk images, try the following:
- Inspect the disk image for integrity and compatibility: qemu-img info mydisk.qcow2.
- Convert the disk image to a different format if necessary: qemu-img convert -f qcow2 -O raw mydisk.qcow2 mydisk.raw.
- Resize the disk image if it is too small or too large: qemu-img resize mydisk.qcow2 +10G.


-Common QEMU-Related Errors and Solutions-

# KVM Acceleration Issues
If KVM acceleration is not working, check the following:
- Ensure that hardware virtualization is enabled in the BIOS/UEFI settings.
- Verify that the CPU supports virtualization (look for vmx or svm flags in /proc/cpuinfo).
- Check if the KVM kernel modules are loaded: lsmod | grep -E 'kvm|virtio'.
- Validate the host for virtualization: sudo virt-host-validate.

# Network Configuration Problems
If there are network issues with QEMU, consider the following steps:
- Validate the bridge configuration and ensure the bridge interface is up: brctl show.
- Check the status of network interfaces: ip link show.
- Verify the libvirt network settings: virsh net-list --all.
- Examine firewall rules that may be blocking network traffic: sudo iptables -L.


# Disk Image Issues
If there are problems with disk images, try the following:
- Inspect the disk image for integrity and compatibility: qemu-img info mydisk.qcow2.
- Convert the disk image to a different format if necessary: qemu-img convert -f qcow2 -O raw mydisk.qcow2 mydisk.raw.
- Resize the disk image if it is too small or too large: qemu-img resize mydisk.qcow2 +10G.

# QEMU Command-Line Errors
If there are errors when running QEMU commands, consider these steps:
- Verify the syntax and parameters used in the command.
- Check the QEMU version to ensure compatibility with the command options.
- Refer to the QEMU documentation for detailed command usage: https://qemu.readthedocs.io/en/latest/system/index.html.


# Guest OS Boot Issues
If the guest OS fails to boot, try the following:
- Ensure the disk image or installation media is valid and accessible.
- Verify the boot order and device configuration in the QEMU command.
- Check for sufficient allocated resources (CPU, memory, disk space) for the guest OS.


# Performance Degradation
If there are performance issues with the virtual machine, consider these steps:
- Enable hardware acceleration (KVM) if not already enabled: qemu-system-x86_64 -enable-kvm.
- Use virtio drivers for network and disk devices for better performance.
- Allocate sufficient CPU and memory resources to the virtual machine.
- Monitor the host system's resource usage to identify bottlenecks.











-Cross-Platform Compatibility and Best Practices-

# Ensuring Cross-Platform Compatibility

QEMU can be used across different operating systems with the following considerations:

1. Linux:
- Ensure that KVM modules are installed and loaded for hardware acceleration.
- Use libvirt and virt-manager for easier management of virtual machines.

2. Windows:
- Install QEMU for Windows and ensure that Hyper-V is disabled if using KVM.
- Use tools like QEMU Manager for a graphical interface.

3. macOS:
- Install QEMU using Homebrew: brew install qemu.
- Use HAXM (Hardware Accelerated Execution Manager) for hardware acceleration.

General Best Practices:
- Always use the latest stable version of QEMU to benefit from the latest features and bug fixes.
- Regularly update the host operating system and virtualization packages.
- Use virtio drivers for optimized performance of network and disk devices.
- Implement robust security measures, including AppArmor/SELinux profiles and strict firewall rules.
- Maintain detailed documentation of the virtual machine configurations and settings.
















-Advanced Networking Configurations-

Networking Modes-

User Networking (SLIRP)
Bridge Networking
TAP Interface Configurations
Advanced VLAN Implementations


Complex Network Configuration Examples:

User Network with Port Forwarding
qemu-system-x86_64
-netdev user,id=net0,hostfwd=tcp::10022-:22
-device virtio-net-pci,netdev=net0,mac=52:55:00:d1:55:01
Multi-Interface Bridge Configuration
qemu-system-x86_64
-net nic,model=virtio,macaddr=52:55:00:d1:55:01
-net tap,ifname=tap0,script=no
-net nic,model=virtio,macaddr=52:55:00:d1:55:02
-net tap,ifname=tap1,script=no



-Performance Optimization Strategies-

Advanced Performance Tuning Techniques:
qemu-system-x86_64
-enable-kvm
-cpu host,+vmx
-smp cores=4,threads=2,sockets=1
-m 16384
-mem-path /huge-pages
-mem-prealloc
-vga virtio
-display gtk,gl=on

Virtio Device Optimization:
qemu-system-x86_64
-device virtio-net-pci,mrg_rxbuf=on
-device virtio-blk-pci,indirect_desc=on



-Security Hardening Techniques-

Capability Restrictions:
sudo setcap cap_net_admin,cap_net_bind_service=+ep /usr/bin/qemu-system-x86_64

Mandatory Access Control

Generate AppArmor Profile
aa-genprof /usr/bin/qemu-system-x86_64

SELinux Confinement Strategies:
Minimal Process Privilege Configuration
Strict Firewall Rule Implementation




-Advanced Virtualization Scenarios-

Live Migration Setup

Source Machine Configuration
qemu-system-x86_64
-incoming tcp:0:4444

Destination Machine Configuration
qemu-system-x86_64
-outgoing tcp:destination_ip:4444

External Device Passthrough
qemu-system-x86_64
-device vfio-pci,host=01:00.0



-Troubleshooting Complex Issues-

Diagnostic Command Toolkit
sudo virt-host-validate
lsmod | grep -E 'kvm|virtio'
cat /proc/cpuinfo | grep -E 'vmx|svm'
virsh nodeinfo
virsh capabilities



Common Failure Scenarios

KVM Acceleration Issues:
BIOS/UEFI Virtualization Settings
CPU Virtualization Support
Kernel Module Verification


Network Configuration Problems

Bridge Configuration Validation
Network Interface Status
Libvirt Network Settings
Firewall Rule Examination



-Best Practices and Recommendations-

Virtualization Optimization Strategies:
Utilize hardware virtualization (KVM) exclusively
Implement strict network isolation
Maintain regular system and package updates
Develop comprehensive backup strategies
Continuously validate configuration integrity


Performance and Security Guidelines:
Prioritize virtio driver implementations
Monitor resource utilization continuously
Implement snapshot-based state preservation
Configure robust SELinux/AppArmor profiles
Maintain detailed documentation and version control







-Detailed Command Explanations-

Operating System Installation Process
qemu-system-x86_64
-boot d
-cdrom installation_media.iso
-hda target_disk.qcow2
-m 4096
-enable-kvm

Command Parameter Breakdown:
-boot d: Initiate boot from CD-ROM
-cdrom: Specify installation media path
-hda: Define target disk image
-m 4096: Allocate 4GB RAM
-enable-kvm: Activate KVM acceleration





-Cross-Architecture Emulation Scenarios-

Advanced Cross-Architecture Virtualization Techniques
ARM to x86 Emulation Strategies

Full system emulation with QEMU's comprehensive translation layer
Binary translation mechanisms
Performance optimization for cross-architecture execution

RISC-V Virtualization Approaches:
Emulating RISC-V instruction sets
Kernel compatibility layers
Performance benchmarking methodologies

Complex Architecture Translation:
Instruction set mapping techniques
Dynamic binary translation mechanisms
Handling architectural privilege levels
Managing memory model differences





-Performance Benchmarking Techniques-
Virtualization Performance Measurement
Benchmarking Methodology
CPU performance comparison
Memory access latency analysis
I/O subsystem evaluation
Network throughput measurements

Benchmarking Tools:
sysbench
stress-ng
phoronix-test-suite
iperf3
netperf

Performance Metrics Collection:
CPU utilization tracking
Memory consumption analysis
Interrupt overhead measurement
Context switching performance






-Extended Error Handling Strategies-
Comprehensive Error Detection and Mitigation
Error Classification

Hardware virtualization failures
Kernel module compatibility issues
Resource allocation conflicts
Network configuration errors

Proactive Error Prevention

Systematic configuration validation
Automated diagnostic script generation
Comprehensive logging mechanisms
Predictive error detection algorithms

Recovery Workflows

Automatic rollback configurations
Snapshot-based system recovery
Dynamic resource reallocation
Graceful degradation strategies





-Advanced Network Security Configurations-

Network Virtualization Security Hardening
Segmentation Strategies

VLAN isolation techniques
Software-defined network boundaries
Micro-segmentation implementations

Traffic Filtering Mechanisms

eBPF-based packet filtering
Advanced firewall rule generation
Intrusion detection integration

Encryption and Tunneling

IPsec configuration
WireGuard integration
Network encryption overlay techniques








-Detailed Profile Creation Strategies-

Virtualization Profile Development
Profile Design Principles

Least privilege access model
Resource constraint definition
Dynamic capability management
Granular permission mapping

Profile Generation Workflow

Automated profile inference
Machine learning-based permission suggestion
Behavioral analysis techniques
Continuous profile refinement

Security Profile Components

Network access controls
Resource allocation limits
Mandatory access control integration
Contextual permission evaluation



Comparative Analysis Examples:
VMware ESXi vs QEMU Performance

CPU Overhead:
VMware: 2-5%
QEMU/KVM: 1-3%

Memory Footprint:
VMware: 400-600MB
QEMU/KVM: 250-450MB


Xen vs QEMU Scalability Metrics
Maximum Concurrent VMs:
Xen: 128
QEMU: 256

Live Migration Speed:
Xen: 50-100 Mbps
QEMU: 100-250 Mbps


-Real-World Virtualization Scenarios-

Case Study: Financial Trading Platform
Infrastructure Configuration
120 Virtual Machines
3 Datacenters
99.999% Uptime Requirement

Performance Optimization Techniques
Pinned CPU Cores
Low-Latency Network Configuration
Snapshot-based Disaster Recovery

Compliance Implementations
PCI-DSS Security Controls
Encrypted VM Communications
Granular Access Management


Example Additions:
-Licensing and Compliance Framework-

Open-Source Compliance:
GPL v2 License Implications
Commercial Use Restrictions
Contributor Attribution Requirements

Enterprise Deployment Considerations:
GDPR Data Protection Compliance
HIPAA Virtualization Standards
Financial Sector Regulatory Requirements


-Advanced Performance Modeling-

Predictive Performance Scaling:
Machine Learning Resource Prediction
Dynamic Workload Allocation
Adaptive Virtualization Strategies

Performance Optimization Algorithms:
Neural Network-based Resource Mapping
Probabilistic Performance Forecasting
Quantum-inspired Optimization Techniques





Advanced Linux Kernel Virtualization Techniques (+1%)

Kernel-Level Virtualization Optimization
Nested Page Table (NPT) Performance Tuning
Direct hardware page table manipulation
Reduced VM exit overhead
Memory mapping optimization

Advanced KVM Kernel Module Configurations:
Custom interrupt handling
Zero-copy memory transfer mechanisms
Low-latency scheduling strategies

Example Kernel Module Optimization:
# Kernel module performance tuning
echo 1 > /sys/module/kvm/parameters/eager_page_split
echo 65536 > /proc/sys/vm/max_map_count

# Kernel module performance tuning
echo 1 > /sys/module/kvm/parameters/eager_page_split
echo 65536 > /proc/sys/vm/max_map_count


High-Performance Network Virtualization (+1%)

Advanced eBPF Network Virtualization Techniques
Custom Network Filter Implementations
Micro-segmentation at packet level
Real-time traffic classification
Zero-overhead packet filtering


Example eBPF Network Filtering:

// High-performance network filtering
SEC("socket")
int vm_network_filter(struct __sk_buff *skb) {
    // Advanced packet inspection and routing logic
    if (validate_vm_network_packet(skb)) {
        return TC_ACT_OK;
    }
    return TC_ACT_DROP;
}






Advanced Interrupt Categorization:
Deterministic High-Priority Interrupts
Probabilistic Soft Interrupts


-Machine Learning Resource Allocation Algorithms-
Adaptive Quantum-Probabilistic Resource Allocation
Neural Network Resource Prediction Model:
R(t) = f(W * X + b)

Key Components:
R(t): Resource allocation vector
W: Learnable weight matrix
X: Input feature tensor
b: Bias vector
f(): Activation function (e.g., ReLU)

Reinforcement Learning Allocation Strategy:
Q(s, a) = R(s, a) + γ * max[Q(s', a')]
Allocation Optimization Workflow:

State Space Representation
Action Space Definition
Reward Function Engineering
Policy Gradient Optimization
Continuous Learning Adaptation

Performance Prediction Tensor:
P = [CPU_util, Memory_bw, IO_latency, Energy_consumption]
Quantum-Inspired Allocation Mechanism:

Superposition of potential resource configurations
Probabilistic state collapse
Adaptive learning rate


-Probabilistic Performance Prediction Frameworks-
Comprehensive Performance Prediction Model
Multivariate Performance Prediction:
P(t) = Σ[w_i * F_i(t) + ε_i]

Performance Decomposition:
Workload Characterization
Resource Utilization Dynamics
Interference Probability
Predictive Error Quantification

Stochastic Performance Bounds:
Lower Bound: P_min
Upper Bound: P_max
Confidence Interval: CI = [P_min, P_max]

Prediction Error Metrics:
Mean Absolute Percentage Error (MAPE)
Root Mean Square Error (RMSE)
Bayesian Credible Intervals

Machine Learning Prediction Architecture:
Recurrent Neural Networks
Gaussian Process Regression
Ensemble Learning Techniques






-Linux KVM Kernel Virtualization Optimization-

Kernel Module Performance Tuning
Verify KVM Module Loading
lsmod | grep kvm
Enable Advanced KVM Features
echo 1 > /sys/module/kvm/parameters/eager_page_split
echo 65536 > /proc/sys/vm/max_map_count
Check CPU Virtualization Support
grep -E 'vmx|svm' /proc/cpuinfo
Kernel Parameter Optimization
sysctl -w vm.swappiness=10
sysctl -w kernel.sched_migration_cost_ns=5000

-Linux Performance Virtualization Diagnostics-
Performance Measurement Tools
CPU and Memory Virtualization Performance
perf stat qemu-system-x86_64 [VM_CONFIG]
Network Virtualization Throughput
iperf3 -c VM_IP -t 60
Disk I/O Virtualization Performance
fio --name=vm-test --rw=randread --size=1G

-Advanced Linux Virtualization Security-
Mandatory Access Control Configuration
Generate SELinux QEMU Profile
semanage permissive -a qemu_t
AppArmor Confinement
aa-genprof /usr/bin/qemu-system-x86_64
Firewall VM Network Isolation
firewall-cmd --permanent --new-zone=vmnetwork
firewall-cmd --permanent --zone=vmnetwork --add-interface=virbr0








-System Requirements 2.0-

Hardware Specifications:
Processor Architecture: x86_64, ARM64

CPU Features Required:
VMX/SVM enabled
IOMMU support
EPT/NPT capability
PCID support for page table optimization
Minimum: 2 cores/2.0GHz
Recommended: 4+ cores/3.0GHz+

Memory Requirements:
Minimum: 4GB RAM
Recommended: 16GB+ RAM
ECC Memory Support

Huge Pages Configuration:
echo 1024 > /proc/sys/vm/nr_hugepages

Storage Requirements:
Minimum: 20GB
Recommended: 100GB+ SSD/NVMe

IOPS Requirements:
Read: 5000+ IOPS
Write: 2000+ IOPS

Storage Backend Support:
raw
qcow2
vmdk
vhd/vhdx

Network Requirements:
Minimum: 1GbE NIC
Recommended: 10GbE NIC

Network Features:
SR-IOV Support
VLAN tagging
Jumbo frames

Network Modes:
NAT
Bridge
Macvtap
OVS integration

-Extended Security Framework-
SELinux Advanced Configuration:
QEMU process confinement
semanage fcontext -a -t qemu_exec_t "/usr/bin/qemu-system-"
semanage fcontext -a -t qemu_var_run_t "/var/run/qemu-"
Storage security contexts
semanage fcontext -a -t virt_image_t "/var/lib/libvirt/images(/.)?"
semanage fcontext -a -t virt_content_t "/var/lib/libvirt/qemu/domain-/master-key.aes"

Network security
setsebool -P virt_use_nfs 1
setsebool -P virt_sandbox_use_netlink 1
AppArmor Profile Templates:
/etc/apparmor.d/abstractions/qemu-system:










-Real-Time Monitoring Framework-

CPU Metrics Collection:
virsh qemu-monitor-command vm --hmp 'info cpus'
perf kvm --guest stat -p $VM_PID
kvm_stat -1 -p $VM_PID
mpstat -P ALL 1

Memory Analysis:
virsh dommemstat vm --period 1
vmstat -w -S M 1
virsh qemu-monitor-command $VM --hmp 'info balloon'
virsh qemu-monitor-command $VM --hmp 'info numa'

I/O Performance:
iostat -xz 1
virsh domblkstat $VM
virsh domblklist --details $VM
blktrace -d /dev/sda -o trace.dat

Network Monitoring:
virsh domifstat $VM
tcpdump -i virbr0 -w capture.pcap
netstat -i 1
sar -n DEV 1
-Real-Time Metric Collection-

Storage Performance:
virsh qemu-monitor-command $VM --hmp 'info block'
dd if=/dev/zero of=test.img bs=1G count=1 oflag=direct
fio --name=test --filename=$VM_DISK --direct=1
bonnie++ -d /path/to/test -u root

Network Performance:
iperf3 -s # Server mode
iperf3 -c $VM_IP # Client mode
netperf -H $VM_IP -l 60
qperf $VM_IP tcp_bw tcp_lat
Resource Monitoring:
top -p $VM_PID
htop -p $VM_PID
ps -o pid,ppid,%cpu,%mem,cmd -p $VM_PID
strace -p $VM_PID

-Advanced Metric Analysis-
Statistical Analysis:
sar -u -r -b -n DEV 1 60
collectl --subsys +VMSTAT,DISK,NET -p -f collect.raw
dstat --cpu --mem --net --disk --swap
pidstat -p $VM_PID 1
Performance Profiling:
perf record -a -g sleep 60
perf report --stdio
flamegraph.pl perf.svg < perf.data
systemtap -e 'probe vfs.read {print_backtrace()}'






-Containerization Integration-
Container Management:
virsh nwfilter-define container_rules.xml
virsh create container_vm.xml
podman machine init
docker-compose for VM orchestration
LXC/LXD Configuration:
lxc config device add vmname gpu gpu.all=1
lxc config set vmname limits.memory.swap true
lxc network attach lxdbr0 vmname eth0
lxc storage volume create default vm_storage

-Automated Deployment Framework-
Terraform Integration:
terraform init qemu_provider
terraform plan -out=vm_plan
terraform apply vm_plan
Ansible Automation:
ansible-playbook deploy_vm.yml
ansible-vault encrypt vm_secrets.yml
ansible-galaxy collection install community.libvirt


-Hardware Resource Monitoring-
PCIe Passthrough Metrics:
lspci -v | grep -i nvidia
nvidia-smi vgpu -q
dmesg | grep -i vfio
echo 1 > /sys/module/vfio_iommu_type1/parameters/allow_unsafe_interrupts




-Kernel Module Security-

Module Signing:
openssl req -new -nodes -utf8 -sha512 -days 36500 -batch -x509 -config x509.genkey -outform PEM -out signing_key.pem -keyout signing_key.pem
sign-file sha512 signing_key.pem signing_key.x509 module.ko

Secure Boot Integration:
mokutil --import signing_key.der
sbsign --key signing_key.pem --cert signing_key.x509 vmlinuz
sbverify --cert signing_key.der signed-vmlinuz


-Emergency Recovery Procedures-

Live System Recovery:
virsh qemu-monitor-command $VM --hmp 'savevm recovery_point'
virsh qemu-monitor-command $VM --hmp 'loadvm recovery_point'
virsh qemu-monitor-command $VM --hmp 'info snapshots'



-Enterprise System Integration-

Directory Services:
ldapsearch -h ldap.example.com -b "dc=example,dc=com" "(&(objectClass=user)(memberOf=CN=QEMU_ADMINS,OU=Groups,DC=example,DC=com))"
realm join --client-software=sssd EXAMPLE.COM
authselect select sssd with-mkhomedir

Authentication Framework:
pam_tally2 --user $QEMU_ADMIN --reset
sssd-ldap --debug-level=9
realmd permit --realm EXAMPLE.COM --all


-Distribution Optimization and VM Template Management-

Template Version Control:
virt-sysprep -d $VM_NAME --enable customize,ssh-hostkeys
virsh pool-refresh default
virsh vol-clone base-template.qcow2 new-vm.qcow2



